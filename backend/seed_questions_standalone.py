#!/usr/bin/env python3
"""
Standalone script to seed strength assessment questions in the database
"""

import asyncio
import sys
import os

# Add the current directory to the path
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from sqlalchemy.ext.asyncio import create_async_engine, AsyncSession
from sqlalchemy.orm import sessionmaker
from sqlalchemy import select
from app.models.assessment import AssessmentQuestion
from app.database import Base

# Database URL
DATABASE_URL = "postgresql+asyncpg://REDACTED:REDACTED@REDACTED:5432/ai_komek"

# Strength assessment questions
QUESTIONS = [
    # Communication questions
    {
        "question_text": "–ö–∞–∫ –≤—ã —á—É–≤—Å—Ç–≤—É–µ—Ç–µ —Å–µ–±—è –ø—Ä–∏ –æ–±—â–µ–Ω–∏–∏ —Å –Ω–æ–≤—ã–º–∏ –ª—é–¥—å–º–∏?",
        "question_type": "single_choice",
        "assessment_category": "communication",
        "options": [
            "–õ–µ–≥–∫–æ –∑–∞–≤–æ–∂—É —Ä–∞–∑–≥–æ–≤–æ—Ä –∏ —á—É–≤—Å—Ç–≤—É—é —Å–µ–±—è –∫–æ–º—Ñ–æ—Ä—Ç–Ω–æ",
            "–ù–µ–º–Ω–æ–≥–æ —Å—Ç–µ—Å–Ω—è—é—Å—å, –Ω–æ –±—ã—Å—Ç—Ä–æ –ø—Ä–∏–≤—ã–∫–∞—é", 
            "–ü—Ä–µ–¥–ø–æ—á–∏—Ç–∞—é —Å–ª—É—à–∞—Ç—å, –∞ –Ω–µ –≥–æ–≤–æ—Ä–∏—Ç—å",
            "–ß—É–≤—Å—Ç–≤—É—é —Å–µ–±—è –Ω–µ—É–≤–µ—Ä–µ–Ω–Ω–æ, –Ω—É–∂–Ω–æ –≤—Ä–µ–º—è"
        ],
        "weight": 1.0,
        "is_active": "true"
    },
    {
        "question_text": "–ö–æ–≥–¥–∞ –≤–∞–º –Ω—É–∂–Ω–æ –æ–±—ä—è—Å–Ω–∏—Ç—å —á—Ç–æ-—Ç–æ —Å–ª–æ–∂–Ω–æ–µ:",
        "question_type": "single_choice",
        "assessment_category": "communication",
        "options": [
            "–ò—Å–ø–æ–ª—å–∑—É—é –ø—Ä–∏–º–µ—Ä—ã –∏ –∞–Ω–∞–ª–æ–≥–∏–∏",
            "–†–∞–∑–±–∏–≤–∞—é –Ω–∞ –ø—Ä–æ—Å—Ç—ã–µ —á–∞—Å—Ç–∏",
            "–ü–æ–∫–∞–∑—ã–≤–∞—é –Ω–∞ –ø—Ä–∞–∫—Ç–∏–∫–µ",
            "–ü—Ä–æ—à—É –∫–æ–ª–ª–µ–≥ –ø–æ–º–æ—á—å —Å –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ–º"
        ],
        "weight": 1.0,
        "is_active": "true"
    },
    {
        "question_text": "–í –≥—Ä—É–ø–ø–æ–≤—ã—Ö –¥–∏—Å–∫—É—Å—Å–∏—è—Ö –≤—ã —á–∞—â–µ:",
        "question_type": "single_choice", 
        "assessment_category": "communication",
        "options": [
            "–ê–∫—Ç–∏–≤–Ω–æ –≤—ã—Ä–∞–∂–∞—é —Å–≤–æ—é —Ç–æ—á–∫—É –∑—Ä–µ–Ω–∏—è",
            "–í–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ —Å–ª—É—à–∞—é –¥—Ä—É–≥–∏—Ö",
            "–ü—ã—Ç–∞—é—Å—å –Ω–∞–π—Ç–∏ –∫–æ–º–ø—Ä–æ–º–∏—Å—Å",
            "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é –¥—Ä—É–≥–∏—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤"
        ],
        "weight": 1.0,
        "is_active": "true"
    },
    # Organization questions
    {
        "question_text": "–ö–∞–∫ –≤—ã –ø–ª–∞–Ω–∏—Ä—É–µ—Ç–µ —Å–≤–æ–π —Ä–∞–±–æ—á–∏–π –¥–µ–Ω—å?",
        "question_type": "single_choice",
        "assessment_category": "organization",
        "options": [
            "–°–æ—Å—Ç–∞–≤–ª—è—é –ø–æ–¥—Ä–æ–±–Ω—ã–π –ø–ª–∞–Ω –∑–∞—Ä–∞–Ω–µ–µ",
            "–î–µ–ª–∞—é –æ–±—â–∏–π —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á",
            "–ü–ª–∞–Ω–∏—Ä—É—é –ø–æ —Ö–æ–¥—É –¥–Ω—è",
            "–†–µ–∞–≥–∏—Ä—É—é –Ω–∞ —Å–∏—Ç—É–∞—Ü–∏–∏ –ø–æ –º–µ—Ä–µ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è"
        ],
        "weight": 1.0,
        "is_active": "true"
    },
    {
        "question_text": "–ü—Ä–∏ —Ä–∞–±–æ—Ç–µ –Ω–∞–¥ –ø—Ä–æ–µ–∫—Ç–æ–º –≤—ã –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ—Ç–µ:",
        "question_type": "single_choice",
        "assessment_category": "organization", 
        "options": [
            "–ß–µ—Ç–∫–æ —Å–ª–µ–¥–æ–≤–∞—Ç—å –ø–ª–∞–Ω—É –∏ —Å—Ä–æ–∫–∞–º",
            "–ì–∏–±–∫–æ –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞—Ç—å—Å—è –∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è–º",
            "–°–Ω–∞—á–∞–ª–∞ –∏–∑—É—á–∏—Ç—å –≤—Å–µ –¥–µ—Ç–∞–ª–∏",
            "–ù–∞—á–∞—Ç—å —Å —Å–∞–º–æ–≥–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–≥–æ"
        ],
        "weight": 1.0,
        "is_active": "true"
    },
    {
        "question_text": "–ö–æ–≥–¥–∞ —É –≤–∞—Å –º–Ω–æ–≥–æ –∑–∞–¥–∞—á –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ:",
        "question_type": "single_choice",
        "assessment_category": "organization",
        "options": [
            "–†–∞—Å—Å—Ç–∞–≤–ª—è—é –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã –∏ –≤—ã–ø–æ–ª–Ω—è—é –ø–æ –ø–æ—Ä—è–¥–∫—É",
            "–î–µ–ª–∞—é –Ω–µ—Å–∫–æ–ª—å–∫–æ –∑–∞–¥–∞—á –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ",
            "–°–Ω–∞—á–∞–ª–∞ –¥–µ–ª–∞—é –ø—Ä–æ—Å—Ç—ã–µ, –ø–æ—Ç–æ–º —Å–ª–æ–∂–Ω—ã–µ",
            "–ü—Ä–æ—à—É –ø–æ–º–æ—â–∏ –≤ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–∏ –∑–∞–¥–∞—á"
        ],
        "weight": 1.0,
        "is_active": "true"
    }
]

async def seed_questions():
    """Seed strength assessment questions into the database"""
    
    # Create engine
    engine = create_async_engine(DATABASE_URL, echo=True)
    
    # Create tables if they don't exist
    async with engine.begin() as conn:
        await conn.run_sync(Base.metadata.create_all)
    
    # Create session
    Session = sessionmaker(engine, class_=AsyncSession, expire_on_commit=False)
    
    async with Session() as session:
        try:
            # Check if questions already exist
            existing_count = await session.execute(
                select(AssessmentQuestion).where(AssessmentQuestion.is_active == 'true')
            )
            existing_questions = existing_count.scalars().all()
            
            if existing_questions:
                print(f"‚ö†Ô∏è  Found {len(existing_questions)} existing questions in database")
                print("Deactivating existing questions...")
                
                # Deactivate existing questions
                for question in existing_questions:
                    question.is_active = 'false'
                await session.commit()
                print("‚úÖ Deactivated existing questions")
            
            # Add new strength assessment questions
            for question_data in QUESTIONS:
                question = AssessmentQuestion(**question_data)
                session.add(question)
            
            await session.commit()
            print(f"‚úÖ Successfully seeded {len(QUESTIONS)} strength assessment questions")
            print("üìä Assessment includes:")
            print("   - 3 Communication questions")
            print("   - 3 Organization questions")
            
        except Exception as e:
            print(f"‚ùå Error seeding questions: {e}")
            await session.rollback()
            raise
        finally:
            await engine.dispose()

if __name__ == "__main__":
    asyncio.run(seed_questions()) 