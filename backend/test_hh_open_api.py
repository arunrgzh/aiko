"""
Test script for HeadHunter Open API
–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã —Å –æ—Ç–∫—Ä—ã—Ç—ã–º API HeadHunter –±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
"""

import httpx
import asyncio
import json

async def test_hh_vacancies():
    """
    –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–∏—Å–∫–∞ –≤–∞–∫–∞–Ω—Å–∏–π —á–µ—Ä–µ–∑ –æ—Ç–∫—Ä—ã—Ç—ã–π API HeadHunter
    """
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ HeadHunter Open API")
    print("=" * 50)
    
    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞
    params = {
        "text": "python",  # –ü–æ–∏—Å–∫ –ø–æ —Ç–µ–∫—Å—Ç—É
        "area": "40",      # –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω
        "page": 0,         # –ü–µ—Ä–≤–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
        "per_page": 5      # 5 –≤–∞–∫–∞–Ω—Å–∏–π –¥–ª—è —Ç–µ—Å—Ç–∞
    }
    
    try:
        async with httpx.AsyncClient() as client:
            print(f"üì° –ó–∞–ø—Ä–æ—Å: GET https://api.hh.kz/vacancies")
            print(f"üîß –ü–∞—Ä–∞–º–µ—Ç—Ä—ã: {params}")
            print()
            
            response = await client.get(
                "https://api.hh.kz/vacancies",
                params=params,
                headers={
                    "User-Agent": "AI-Komekshi Job Platform Parser"
                },
                timeout=30.0
            )
            
            if response.status_code == 200:
                data = response.json()
                
                print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ! –ù–∞–π–¥–µ–Ω–æ: {data.get('found', 0)} –≤–∞–∫–∞–Ω—Å–∏–π")
                print(f"üìÑ –°—Ç—Ä–∞–Ω–∏—Ü: {data.get('pages', 0)}")
                print(f"üìã –ù–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ: {len(data.get('items', []))}")
                print()
                
                # –ü–æ–∫–∞–∑–∞—Ç—å –ø–µ—Ä–≤—ã–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–∞–∫–∞–Ω—Å–∏–π
                for i, vacancy in enumerate(data.get('items', [])[:3], 1):
                    print(f"üî∏ –í–∞–∫–∞–Ω—Å–∏—è {i}:")
                    print(f"   –ù–∞–∑–≤–∞–Ω–∏–µ: {vacancy.get('name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}")
                    print(f"   –ö–æ–º–ø–∞–Ω–∏—è: {vacancy.get('employer', {}).get('name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}")
                    print(f"   –ó–∞—Ä–ø–ª–∞—Ç–∞: {format_salary(vacancy.get('salary'))}")
                    print(f"   –ì–æ—Ä–æ–¥: {vacancy.get('area', {}).get('name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}")
                    print(f"   URL: {vacancy.get('alternate_url', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}")
                    print()
                
                return True
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ API: {response.status_code}")
                print(f"–û—Ç–≤–µ—Ç: {response.text[:200]}")
                return False
                
    except httpx.RequestError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ç–∏: {str(e)}")
        return False
    except Exception as e:
        print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {str(e)}")
        return False

async def test_hh_areas():
    """
    –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Ä–µ–≥–∏–æ–Ω–æ–≤
    """
    print("üåç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–≥–∏–æ–Ω–æ–≤")
    print("=" * 40)
    
    try:
        async with httpx.AsyncClient() as client:
            response = await client.get(
                "https://api.hh.kz/areas",
                headers={
                    "User-Agent": "AI-Komekshi Job Platform Parser"
                },
                timeout=30.0
            )
            
            if response.status_code == 200:
                areas = response.json()
                print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(areas)} —Å—Ç—Ä–∞–Ω/—Ä–µ–≥–∏–æ–Ω–æ–≤")
                
                # –ù–∞–π—Ç–∏ –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω
                for area in areas:
                    if area.get("name") == "–ö–∞–∑–∞—Ö—Å—Ç–∞–Ω":
                        print(f"üá∞üáø –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω (ID: {area.get('id')})")
                        cities = area.get("areas", [])
                        print(f"   –ì–æ—Ä–æ–¥–æ–≤: {len(cities)}")
                        for city in cities[:5]:  # –ü–µ—Ä–≤—ã–µ 5 –≥–æ—Ä–æ–¥–æ–≤
                            print(f"   - {city.get('name')} (ID: {city.get('id')})")
                        if len(cities) > 5:
                            print(f"   ... –∏ –µ—â–µ {len(cities) - 5} –≥–æ—Ä–æ–¥–æ–≤")
                        break
                
                return True
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ API: {response.status_code}")
                return False
                
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
        return False

def format_salary(salary_data):
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞—Ä–ø–ª–∞—Ç—ã
    """
    if not salary_data:
        return "–ù–µ —É–∫–∞–∑–∞–Ω–∞"
    
    salary_from = salary_data.get("from")
    salary_to = salary_data.get("to")
    currency = salary_data.get("currency", "")
    
    if salary_from and salary_to:
        return f"{salary_from:,} - {salary_to:,} {currency}"
    elif salary_from:
        return f"–æ—Ç {salary_from:,} {currency}"
    elif salary_to:
        return f"–¥–æ {salary_to:,} {currency}"
    else:
        return "–ù–µ —É–∫–∞–∑–∞–Ω–∞"

async def main():
    """
    –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    """
    print("üöÄ HeadHunter Open API - –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ")
    print("–ü–∞—Ä—Å–∏–Ω–≥ –æ—Ç–∫—Ä—ã—Ç–æ–≥–æ API –±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏")
    print("=" * 60)
    print()
    
    # –¢–µ—Å—Ç –ø–æ–∏—Å–∫–∞ –≤–∞–∫–∞–Ω—Å–∏–π
    vacancies_ok = await test_hh_vacancies()
    print()
    
    # –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–≥–∏–æ–Ω–æ–≤
    areas_ok = await test_hh_areas()
    print()
    
    # –ò—Ç–æ–≥–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    print("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:")
    print("=" * 30)
    print(f"–ü–æ–∏—Å–∫ –≤–∞–∫–∞–Ω—Å–∏–π: {'‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç' if vacancies_ok else '‚ùå –û—à–∏–±–∫–∞'}")
    print(f"–ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–≥–∏–æ–Ω–æ–≤: {'‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç' if areas_ok else '‚ùå –û—à–∏–±–∫–∞'}")
    
    if vacancies_ok and areas_ok:
        print("\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!")
        print("HeadHunter Open API —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.")
    else:
        print("\n‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ—à–ª–∏.")
    
    print("\nüìù –ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:")
    print("GET https://api.hh.kz/vacancies?text=python&area=40")
    print("GET https://api.hh.kz/vacancies?text=javascript&area=40&page=1")
    print("GET https://api.hh.kz/areas")

if __name__ == "__main__":
    asyncio.run(main()) 