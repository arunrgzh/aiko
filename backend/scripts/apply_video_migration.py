#!/usr/bin/env python3
"""
Script to apply video table migration and seed initial video data
Run with: python scripts/apply_video_migration.py
"""

import asyncio
import sys
import os

# Add the parent directory to the path so we can import our modules
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from sqlalchemy.ext.asyncio import create_async_engine
from sqlalchemy import text
from app.config import settings

async def apply_video_migration():
    """Apply video table migration and seed initial data"""
    
    # Create engine
    engine = create_async_engine(settings.database_url, echo=True)
    
    try:
        async with engine.begin() as conn:
            print("üöÄ Applying video tables migration...")
            
            # Create videos table
            videos_migration = """
            -- Create videos table
            CREATE TABLE IF NOT EXISTS videos (
                id SERIAL PRIMARY KEY,
                title VARCHAR NOT NULL,
                description TEXT,
                youtube_url VARCHAR NOT NULL,
                youtube_video_id VARCHAR NOT NULL,
                thumbnail_url VARCHAR,
                category VARCHAR NOT NULL CHECK (category IN ('employment', 'motion')),
                is_featured BOOLEAN DEFAULT FALSE,
                views INTEGER DEFAULT 0,
                created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
                updated_at TIMESTAMP WITH TIME ZONE
            );

            -- Create user_video_history table
            CREATE TABLE IF NOT EXISTS user_video_history (
                id SERIAL PRIMARY KEY,
                user_id INTEGER NOT NULL REFERENCES users(id) ON DELETE CASCADE,
                video_id INTEGER NOT NULL REFERENCES videos(id) ON DELETE CASCADE,
                watched_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
                UNIQUE(user_id, video_id)
            );

            -- Create indexes for better performance
            CREATE INDEX IF NOT EXISTS idx_videos_category ON videos(category);
            CREATE INDEX IF NOT EXISTS idx_videos_is_featured ON videos(is_featured);
            CREATE INDEX IF NOT EXISTS idx_videos_youtube_video_id ON videos(youtube_video_id);
            CREATE INDEX IF NOT EXISTS idx_user_video_history_user_id ON user_video_history(user_id);
            CREATE INDEX IF NOT EXISTS idx_user_video_history_video_id ON user_video_history(video_id);
            CREATE INDEX IF NOT EXISTS idx_user_video_history_watched_at ON user_video_history(watched_at);
            """
            
            await conn.execute(text(videos_migration))
            print("‚úÖ Successfully applied video tables migration")
            
            # Seed initial video data
            print("üå± Seeding initial video data...")
            
            # Check if videos already exist
            check_videos = "SELECT COUNT(*) FROM videos"
            result = await conn.execute(text(check_videos))
            video_count = result.scalar()
            
            if video_count == 0:
                seed_videos = """
                INSERT INTO videos (title, description, youtube_url, youtube_video_id, thumbnail_url, category, is_featured) VALUES
                -- Employment videos
                ('–ö–∞–∫ —Å–æ—Å—Ç–∞–≤–∏—Ç—å —Ä–µ–∑—é–º–µ: –ø–æ–ª–Ω–æ–µ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ', '–ü–æ–¥—Ä–æ–±–Ω–æ–µ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –ø–æ —Å–æ–∑–¥–∞–Ω–∏—é —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–≥–æ —Ä–µ–∑—é–º–µ –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ä–∞–±–æ—Ç—ã', 'https://www.youtube.com/watch?v=dQw4w9WgXcQ', 'dQw4w9WgXcQ', 'https://img.youtube.com/vi/dQw4w9WgXcQ/maxresdefault.jpg', 'employment', true),
                ('–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—é: —Å–æ–≤–µ—Ç—ã HR-—Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞', '–ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —Å–æ–≤–µ—Ç—ã –ø–æ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ –∫ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—é –æ—Ç –æ–ø—ã—Ç–Ω–æ–≥–æ HR-—Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞', 'https://www.youtube.com/watch?v=oHg5SJYRHA0', 'oHg5SJYRHA0', 'https://img.youtube.com/vi/oHg5SJYRHA0/maxresdefault.jpg', 'employment', true),
                ('–°—Ç—Ä–∞—Ç–µ–≥–∏–∏ –ø–æ–∏—Å–∫–∞ —Ä–∞–±–æ—Ç—ã –≤ 2024 –≥–æ–¥—É', '–°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç–æ–¥—ã –∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞ —Ä–∞–±–æ—Ç—ã', 'https://www.youtube.com/watch?v=9bZkp7q19f0', '9bZkp7q19f0', 'https://img.youtube.com/vi/9bZkp7q19f0/maxresdefault.jpg', 'employment', false),
                ('–†–∞–∑–≤–∏—Ç–∏–µ –∫–∞—Ä—å–µ—Ä—ã: –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ —Ü–µ–ª–µ–π', '–ö–∞–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –∫–∞—Ä—å–µ—Ä–Ω—ã–π —Ä–æ—Å—Ç –∏ –¥–æ—Å—Ç–∏–≥–∞—Ç—å –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã—Ö —Ü–µ–ª–µ–π', 'https://www.youtube.com/watch?v=YQHsXMglC9A', 'YQHsXMglC9A', 'https://img.youtube.com/vi/YQHsXMglC9A/maxresdefault.jpg', 'employment', false),
                
                -- Motion design videos
                ('After Effects –¥–ª—è –Ω–∞—á–∏–Ω–∞—é—â–∏—Ö: –æ—Å–Ω–æ–≤—ã –∞–Ω–∏–º–∞—Ü–∏–∏', '–ò–∑—É—á–∏—Ç–µ –æ—Å–Ω–æ–≤—ã —Ä–∞–±–æ—Ç—ã —Å After Effects –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∞–Ω–∏–º–∞—Ü–∏–∏', 'https://www.youtube.com/watch?v=fJ9rUzIMcZQ', 'fJ9rUzIMcZQ', 'https://img.youtube.com/vi/fJ9rUzIMcZQ/maxresdefault.jpg', 'motion', true),
                ('–°–æ–∑–¥–∞–Ω–∏–µ –º–æ—É—à–Ω-–≥—Ä–∞—Ñ–∏–∫–∏: –ø—Ä–∏–Ω—Ü–∏–ø—ã –∏ —Ç–µ—Ö–Ω–∏–∫–∏', '–û—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–∏–Ω—Ü–∏–ø—ã –∏ —Ç–µ—Ö–Ω–∏–∫–∏ —Å–æ–∑–¥–∞–Ω–∏—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–π –º–æ—É—à–Ω-–≥—Ä–∞—Ñ–∏–∫–∏', 'https://www.youtube.com/watch?v=astISOttCQ0', 'astISOttCQ0', 'https://img.youtube.com/vi/astISOttCQ0/maxresdefault.jpg', 'motion', true),
                ('–ê–Ω–∏–º–∞—Ü–∏—è –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π –≤ After Effects', '–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ —Ç–µ—Ö–Ω–∏–∫–∏ –∞–Ω–∏–º–∞—Ü–∏–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π –∏ –æ–±—ä–µ–∫—Ç–æ–≤', 'https://www.youtube.com/watch?v=iik25wqIuFo', 'iik25wqIuFo', 'https://img.youtube.com/vi/iik25wqIuFo/maxresdefault.jpg', 'motion', false)
                """
                
                await conn.execute(text(seed_videos))
                print("‚úÖ Successfully seeded initial video data")
            else:
                print("‚ö†Ô∏è Videos already exist, skipping seed data")
            
            print("üéâ Video migration and seeding completed successfully!")
            
    except Exception as e:
        print(f"‚ùå Error applying video migration: {e}")
        raise
    finally:
        await engine.dispose()

if __name__ == "__main__":
    asyncio.run(apply_video_migration())