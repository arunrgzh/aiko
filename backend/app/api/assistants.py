from fastapi import APIRouter, Depends, HTTPException, status
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy import select, desc, func
from sqlalchemy.orm import selectinload
from typing import Optional, List
import time
import uuid
import logging
from openai import AsyncAzureOpenAI

from ..database import get_db
from ..models.user import User
from ..models.assistant import Assistant
from ..models.chat import ChatHistory, Message, MessageRole
from ..schemas.assistant import (
    AssistantCreate, AssistantUpdate, AssistantResponse, 
    AssistantsListResponse, AssistantListItem, AssistantWithChatHistory
)
from ..schemas.chat import (
    SendMessageRequest, SendMessageResponse, ChatHistoryResponse,
    ConversationMessage, SenderInfo
)
from ..auth.jwt import get_current_user
from ..config import settings

router = APIRouter(prefix="/main/assistants", tags=["assistants"])
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Azure OpenAI –∫–ª–∏–µ–Ω—Ç–∞
azure_openai_client = None
if settings.azure_openai_api_key and settings.azure_openai_base_url:
    try:
        azure_openai_client = AsyncAzureOpenAI(
            api_key=settings.azure_openai_api_key,
            azure_endpoint=settings.azure_openai_base_url,
            api_version=settings.azure_openai_api_version
        )
    except Exception as e:
        logger.error(f"Failed to create Azure OpenAI client: {e}")
        azure_openai_client = None

@router.get("/", response_model=AssistantsListResponse)
async def get_assistants(
    db: AsyncSession = Depends(get_db),
    current_user: User = Depends(get_current_user)
):
    """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    result = await db.execute(
        select(Assistant)
        .where(Assistant.user_id == current_user.id)
        .where(Assistant.is_active == True)
        .order_by(desc(Assistant.updated_at))
    )
    assistants = result.scalars().all()
    
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ –Ω—É–∂–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
    assistant_items = [
        AssistantListItem(
            id=str(assistant.id),
            name=str(assistant.name),
            description=str(assistant.description) if assistant.description is not None else None,
            model=str(assistant.model),
            lastEdited=int(assistant.updated_at.timestamp()) if assistant.updated_at is not None else int(assistant.created_at.timestamp())
        )
        for assistant in assistants
    ]
    
    return AssistantsListResponse(
        data=assistant_items,
        total=len(assistant_items)
    )

@router.get("/{assistant_id}", response_model=AssistantWithChatHistory)
async def get_assistant(
    assistant_id: int,
    db: AsyncSession = Depends(get_db),
    current_user: User = Depends(get_current_user)
):
    """–ü–æ–ª—É—á–∏—Ç—å –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ —Å –∏—Å—Ç–æ—Ä–∏–µ–π —á–∞—Ç–æ–≤"""
    result = await db.execute(
        select(Assistant)
        .options(
            selectinload(Assistant.chat_histories)
            .selectinload(ChatHistory.messages)
        )
        .where(Assistant.id == assistant_id)
        .where(Assistant.user_id == current_user.id)
    )
    assistant = result.scalar_one_or_none()
    
    if not assistant:
        raise HTTPException(
            status_code=status.HTTP_404_NOT_FOUND,
            detail="Assistant not found"
        )
    
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–æ–≤ –≤ –Ω—É–∂–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
    chat_history = []
    for chat in assistant.chat_histories:
        if chat.enable:
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
            conversation = []
            for message in chat.messages:
                conversation.append(ConversationMessage(
                    id=str(message.id),
                    sender=SenderInfo(
                        id=message.sender_id,
                        name=message.sender_name,
                        avatarImageUrl=message.avatar_image_url
                    ),
                    content=message.content,
                    timestamp=message.timestamp,
                    isMyMessage=message.is_my_message,
                    fresh=message.fresh
                ))
            
            chat_history.append(ChatHistoryResponse(
                id=str(chat.id),
                title=chat.title,
                conversation=conversation,
                lastConversation=chat.last_conversation or "",
                createdTime=chat.created_time,
                updatedTime=chat.updated_time,
                enable=chat.enable
            ))
    
    response = AssistantWithChatHistory.model_validate(assistant)
    response.chat_history = chat_history
    
    return response

@router.post("/{assistant_id}/chat", response_model=SendMessageResponse)
async def send_message_to_assistant(
    assistant_id: int,
    request: SendMessageRequest,
    db: AsyncSession = Depends(get_db),
    current_user: User = Depends(get_current_user)
):
    """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç—É"""
    
    logger.info(f"üî• Chat request received: assistant_id={assistant_id}, user={current_user.username}")
    logger.info(f"üî• Message: {request.message[:100]}...")
    if request.images:
        logger.info(f"üì∏ Images received: {len(request.images)} images")
    else:
        logger.info("üì∏ No images in request")
    
    try:
        # Check if assistant exists and belongs to user
        result = await db.execute(
            select(Assistant)
            .where(Assistant.id == assistant_id)
            .where(Assistant.user_id == current_user.id)
        )
        assistant = result.scalar_one_or_none()
        
        # If no assistant found, create a default one for this user
        if not assistant:
            logger.info(f"Creating default assistant for user {current_user.id}")
            assistant = Assistant(
                user_id=current_user.id,
                name="AI –ü–æ–º–æ—â–Ω–∏–∫ –ø–æ –ø–æ–∏—Å–∫—É —Ä–∞–±–æ—Ç—ã",
                description="–í–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ä–∞–±–æ—Ç—ã –∏ –∫–∞—Ä—å–µ—Ä–Ω–æ–≥–æ –∫–æ–Ω—Å—É–ª—å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è",
                model="gpt-4o",
                system_prompt="–¢—ã - –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç –ø–æ –∫–∞—Ä—å–µ—Ä–µ –∏ –ø–æ–∏—Å–∫—É —Ä–∞–±–æ—Ç—ã. –ü–æ–º–æ–≥–∞–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –Ω–∞—Ö–æ–¥–∏—Ç—å –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏, —Å–æ—Å—Ç–∞–≤–ª—è—Ç—å —Ä–µ–∑—é–º–µ –∏ –≥–æ—Ç–æ–≤–∏—Ç—å—Å—è –∫ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—è–º. –ë—É–¥—å –≤–µ–∂–ª–∏–≤—ã–º –∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–º.",
                temperature="0.7",
                max_tokens=4096,
                is_active=True
            )
            db.add(assistant)
            await db.commit()
            await db.refresh(assistant)
    
        # –ù–∞—Ö–æ–¥–∏–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞
        participant_id = request.participant
        chat_history = None
        
        if participant_id and participant_id != "":
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ participant_id —á–∏—Å–ª–æ–º (—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —á–∞—Ç)
            try:
                chat_id = int(participant_id)
                # –ò—â–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —á–∞—Ç –ø–æ ID
                chat_result = await db.execute(
                    select(ChatHistory)
                    .where(ChatHistory.id == chat_id)
                    .where(ChatHistory.user_id == current_user.id)
                    .where(ChatHistory.assistant_id == assistant.id)
                    .options(selectinload(ChatHistory.messages))
                )
                chat_history = chat_result.scalar_one_or_none()
            except ValueError:
                # participant_id –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —á–∏—Å–ª–æ–º - —ç—Ç–æ –Ω–æ–≤—ã–π —á–∞—Ç —Å UUID
                # –ù–µ –∏—â–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —á–∞—Ç, —Å–æ–∑–¥–∞–¥–∏–º –Ω–æ–≤—ã–π
                chat_history = None
        
        if not chat_history:
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —á–∞—Ç
            current_time = int(time.time())
            chat_history = ChatHistory(
                assistant_id=assistant.id,
                user_id=current_user.id,
                title=request.message[:50] + "..." if len(request.message) > 50 else request.message,
                last_conversation=request.message,
                created_time=current_time,
                updated_time=current_time,
                enable=True
            )
            db.add(chat_history)
            await db.flush()  # –ü–æ–ª—É—á–∞–µ–º ID
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_message = Message(
            chat_history_id=chat_history.id,
            content=request.message,
            role=MessageRole.USER,
            sender_id="user",
            sender_name=current_user.username,
            is_my_message=True,
            fresh=False
        )
        db.add(user_message)
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π –ü–ï–†–ï–î –≤—ã–∑–æ–≤–æ–º AI API
        messages_result = await db.execute(
            select(Message)
            .where(Message.chat_history_id == chat_history.id)
            .order_by(Message.id.desc())
            .limit(10)
        )
        recent_messages = messages_result.scalars().all()
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ (–ø–µ—Ä–µ–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π, –ù–ï chat_history)
        ai_response_content = await generate_ai_response(
            user_message=request.message,
            recent_messages=list(reversed(recent_messages)),  # –ü–µ—Ä–µ–≤–æ—Ä–∞—á–∏–≤–∞–µ–º –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –æ—á–µ—Ä–µ–¥–Ω–æ—Å—Ç–∏
            images=request.images  # –ü–µ—Ä–µ–¥–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
        ai_message = Message(
            chat_history_id=chat_history.id,
            content=ai_response_content,
            role=MessageRole.AI,
            sender_id="ai",
            sender_name="BOT",
            avatar_image_url="/img/thumbs/ai.jpg",
            is_my_message=False,
            fresh=True
        )
        db.add(ai_message)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
        try:
            await db.commit()
            logger.info(f"üíæ Successfully saved message to database")
        except Exception as e:
            logger.error(f"‚ùå Database error: {str(e)}")
            await db.rollback()
            # –í—Å–µ —Ä–∞–≤–Ω–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ç–≤–µ—Ç, –¥–∞–∂–µ –µ—Å–ª–∏ –Ω–µ —Å–º–æ–≥–ª–∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ –ë–î
            pass
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ç–≤–µ—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ, —Å–æ–≤–º–µ—Å—Ç–∏–º–æ–º —Å —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–æ–º
        response = SendMessageResponse(
            replies=[ai_response_content]
        )
        
        logger.info(f"‚úÖ Chat response prepared successfully")
        return response
        
    except Exception as e:
        logger.error(f"‚ùå Error in chat endpoint: {str(e)}")
        logger.exception("Full error traceback:")
        
        # Return error response but in the expected format
        return SendMessageResponse(
            replies=[f"–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑. (–û—à–∏–±–∫–∞: {str(e)})"]
        )

async def generate_ai_response(
    user_message: str, 
    recent_messages: list | None = None,
    images: list[str] | None = None
) -> str:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ –∏—Å–ø–æ–ª—å–∑—É—è Azure OpenAI API"""
    
    # –ï—Å–ª–∏ Azure OpenAI API –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –º–æ–∫-–æ—Ç–≤–µ—Ç—ã
    if not azure_openai_client or not settings.azure_openai_api_key:
        logger.warning("Azure OpenAI API not configured, using mock responses")
        return generate_mock_ai_response(user_message, images)
    
    logger.info(f"ü§ñ Calling Azure OpenAI API for message: {user_message[:50]}...")
    
    try:
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
        messages = []
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
        # if assistant.system_prompt:
        #     messages.append({
        #         "role": "system",
        #         "content": assistant.system_prompt
        #     })
        # else:
        #     # –î–µ—Ñ–æ–ª—Ç–Ω—ã–π —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ä–∞–±–æ—Ç—ã
        messages.append({
            "role": "system",
            "content": """–¢—ã - –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç –ø–æ –∫–∞—Ä—å–µ—Ä–µ –∏ –ø–æ–∏—Å–∫—É —Ä–∞–±–æ—Ç—ã –¥–ª—è –ª—é–¥–µ–π —Å –∏–Ω–≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å—é –≤ AI-Komekshi. 
            –¢–≤–æ—è –∑–∞–¥–∞—á–∞ - –ø–æ–º–æ–≥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º —Å:
            - –ü–æ–∏—Å–∫–æ–º –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –≤–∞–∫–∞–Ω—Å–∏–π
            - –°–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ–º —Ä–µ–∑—é–º–µ
            - –ü–æ–¥–≥–æ—Ç–æ–≤–∫–æ–π –∫ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—è–º
            - –†–∞–∑–≤–∏—Ç–∏–µ–º –∫–∞—Ä—å–µ—Ä—ã
            - –°–æ–≤–µ—Ç–∞–º–∏ –ø–æ —Ç—Ä—É–¥–æ—É—Å—Ç—Ä–æ–π—Å—Ç–≤—É
            
            –û—Ç–≤–µ—á–∞–π –¥—Ä—É–∂–µ–ª—é–±–Ω–æ, –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ –∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ. –ò—Å–ø–æ–ª—å–∑—É–π —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫."""
        })
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        if recent_messages:
            for msg in recent_messages:
                if msg.role == MessageRole.USER:
                    messages.append({
                        "role": "user",
                        "content": msg.content
                    })
                elif msg.role == MessageRole.AI:
                    messages.append({
                        "role": "assistant", 
                        "content": msg.content
                    })
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if images and len(images) > 0:
            # –°–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏ - –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç—Ä–æ–∫—É –∫–∞–∫ fallback –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
            content_text = f"{user_message}\n\n[–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–æ]"
            messages.append({
                "role": "user", 
                "content": content_text
            })
            
            logger.info(f"üì∏ Received {len(images)} images for analysis")
        else:
            # –û–±—ã—á–Ω–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            messages.append({
                "role": "user",
                "content": user_message
            })
        
        # –í—ã–∑—ã–≤–∞–µ–º Azure OpenAI API
        response = await azure_openai_client.chat.completions.create(
            model=settings.azure_openai_deployment_name,  # –ò—Å–ø–æ–ª—å–∑—É–µ–º deployment name
            messages=messages,
            max_tokens=settings.azure_openai_max_tokens,
            temperature=float(settings.azure_openai_temperature),
            stream=False
        )
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –æ—Ç–≤–µ—Ç
        ai_response = response.choices[0].message.content
        
        if not ai_response:
            logger.error("Empty response from Azure OpenAI")
            return generate_mock_ai_response(user_message)
            
        logger.info(f"‚úÖ Azure OpenAI API response received: {len(ai_response)} characters")
        return ai_response.strip()
        
    except Exception as e:
        logger.error(f"‚ùå Error calling Azure OpenAI API: {str(e)}")
        logger.error(f"   Using mock response instead")
        # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –º–æ–∫-–æ—Ç–≤–µ—Ç
        return generate_mock_ai_response(user_message, images)

def generate_mock_ai_response(user_message: str, images: list[str] | None = None) -> str:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –º–æ–∫-–æ—Ç–≤–µ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ (fallback)"""
    
    logger.info(f"üé≠ Mock response called with message: {user_message[:50]}...")
    if images:
        logger.info(f"üé≠ Mock response called WITH {len(images)} images")
    else:
        logger.info("üé≠ Mock response called without images")
    
    # –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    if images and len(images) > 0:
        return f"""–û—Ç–ª–∏—á–Ω–æ! –Ø –≤–∏–∂—É, —á—Ç–æ –≤—ã –ø—Ä–∏—Å–ª–∞–ª–∏ {len(images)} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ(–π). 

üîç **–ß—Ç–æ —è –º–æ–≥—É —Å–¥–µ–ª–∞—Ç—å —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏:**

üìã **–ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—é–º–µ** - –µ—Å–ª–∏ —ç—Ç–æ —Å–∫–∞–Ω –∏–ª–∏ —Ñ–æ—Ç–æ —Ä–µ–∑—é–º–µ, —è –º–æ–≥—É –¥–∞—Ç—å —Å–æ–≤–µ—Ç—ã –ø–æ —É–ª—É—á—à–µ–Ω–∏—é —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –∏ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è

üìÑ **–ê–Ω–∞–ª–∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤** - –ø–æ–º–æ–≥—É —Ä–∞–∑–æ–±—Ä–∞—Ç—å –ª—é–±—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å —Ç—Ä—É–¥–æ—É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ–º

üíº **–ê–Ω–∞–ª–∏–∑ –≤–∞–∫–∞–Ω—Å–∏–π** - –µ—Å–ª–∏ —ç—Ç–æ —Å–∫—Ä–∏–Ω—à–æ—Ç –≤–∞–∫–∞–Ω—Å–∏–∏, –ø–æ–¥—Å–∫–∞–∂—É –∫–∞–∫ –ª—É—á—à–µ –∫ –Ω–µ–π –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å—Å—è

üéØ **–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—é** - –µ—Å–ª–∏ —ç—Ç–æ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –æ –∫–æ–º–ø–∞–Ω–∏–∏, –ø–æ–º–æ–≥—É –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –≤–æ–ø—Ä–æ—Å—ã

–û–ø–∏—à–∏—Ç–µ, —á—Ç–æ –∏–º–µ–Ω–Ω–æ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏, –∏ —è –¥–∞–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –ø–æ–ª–µ–∑–Ω—ã–µ —Å–æ–≤–µ—Ç—ã –¥–ª—è –≤–∞—à–µ–≥–æ —Ç—Ä—É–¥–æ—É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞!"""

    responses = [
        "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã –æ –ø–æ–∏—Å–∫–µ —Ä–∞–±–æ—Ç—ã, —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–∏ —Ä–µ–∑—é–º–µ –∏–ª–∏ —Ä–∞–∑–≤–∏—Ç–∏–∏ –∫–∞—Ä—å–µ—Ä—ã, —è –≥–æ—Ç–æ–≤ –ø–æ–º–æ—á—å. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É—Ç–æ—á–Ω–∏—Ç–µ, —á–µ–º –º–æ–≥—É –±—ã—Ç—å –ø–æ–ª–µ–∑–µ–Ω! üòä",
        "–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ! –Ø –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç AI-Komekshi –∏ –≥–æ—Ç–æ–≤ –ø–æ–º–æ—á—å –≤–∞–º —Å –ø–æ–∏—Å–∫–æ–º —Ä–∞–±–æ—Ç—ã. –û —á–µ–º —Ö–æ—Ç–µ–ª–∏ –±—ã –ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å?",
        "–ü–æ–Ω—è—Ç–Ω–æ! –î–∞–≤–∞–π—Ç–µ —Ä–∞–∑–±–µ—Ä–µ–º —ç—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å –ø–æ–¥—Ä–æ–±–Ω–µ–µ. –ö–∞–∫—É—é –∏–º–µ–Ω–Ω–æ –ø–æ–º–æ—â—å –≤–∞–º –Ω—É–∂–Ω–∞ –≤ –ø–æ–∏—Å–∫–µ —Ä–∞–±–æ—Ç—ã?",
        "–û—Ç–ª–∏—á–Ω—ã–π –≤–æ–ø—Ä–æ—Å! –ö–∞–∫ –≤–∞—à AI-–ø–æ–º–æ—â–Ω–∏–∫, —è —Ä–µ–∫–æ–º–µ–Ω–¥—É—é —Å–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏ –¥–ª—è —É—Å–ø–µ—à–Ω–æ–≥–æ —Ç—Ä—É–¥–æ—É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞...",
        "–Ø –∞–Ω–∞–ª–∏–∑–∏—Ä—É—é –≤–∞—à –∑–∞–ø—Ä–æ—Å –∏ –≥–æ—Ç–æ–≤ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ —Ä–µ—à–µ–Ω–∏—è –¥–ª—è –≤–∞—à–µ–π –∫–∞—Ä—å–µ—Ä—ã."
    ]
    
    # –ü—Ä–æ—Å—Ç–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –æ—Ç–≤–µ—Ç–æ–≤
    user_lower = user_message.lower()
    
    if any(word in user_lower for word in ['—Ä–µ–∑—é–º–µ', 'cv']):
        return "–î–ª—è —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Ä–µ–∑—é–º–µ —Ä–µ–∫–æ–º–µ–Ω–¥—É—é:\n\n1. –£–∫–∞–∑–∞—Ç—å —á–µ—Ç–∫—É—é —Ü–µ–ª—å —Ç—Ä—É–¥–æ—É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞\n2. –í—ã–¥–µ–ª–∏—Ç—å –∫–ª—é—á–µ–≤—ã–µ –Ω–∞–≤—ã–∫–∏ –∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è\n3. –î–æ–±–∞–≤–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–∏\n4. –£–∫–∞–∑–∞—Ç—å –æ–ø—ã—Ç —Ä–∞–±–æ—Ç—ã –≤ —Ö—Ä–æ–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–º –ø–æ—Ä—è–¥–∫–µ\n\n–ú–æ–≥—É –ø–æ–º–æ—á—å —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º–∏ —Ä–∞–∑–¥–µ–ª–∞–º–∏ —Ä–µ–∑—é–º–µ. –û —á–µ–º —Ö–æ—Ç–µ–ª–∏ –±—ã —É–∑–Ω–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–µ–µ?"
    elif any(word in user_lower for word in ['—Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–µ', '–∏–Ω—Ç–µ—Ä–≤—å—é']):
        return "–î–ª—è —É—Å–ø–µ—à–Ω–æ–≥–æ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—è —Å–æ–≤–µ—Ç—É—é:\n\n1. –ò–∑—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–º–ø–∞–Ω–∏–∏\n2. –ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –æ—Ç–≤–µ—Ç—ã –Ω–∞ —Ç–∏–ø–∏—á–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã\n3. –ü–æ–¥—É–º–∞—Ç—å –æ –≤–æ–ø—Ä–æ—Å–∞—Ö —Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—é\n4. –ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –ø—Ä–∏–º–µ—Ä—ã –∏–∑ –æ–ø—ã—Ç–∞ —Ä–∞–±–æ—Ç—ã\n\n–ï—Å—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã –æ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ –∫ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—é?"
    elif any(word in user_lower for word in ['—Ä–∞–±–æ—Ç–∞', '–≤–∞–∫–∞–Ω—Å–∏–∏', '–ø–æ–∏—Å–∫']):
        return "–î–ª—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞ —Ä–∞–±–æ—Ç—ã —Ä–µ–∫–æ–º–µ–Ω–¥—É—é:\n\n1. –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ü–µ–ª–µ–≤—ã–µ –¥–æ–ª–∂–Ω–æ—Å—Ç–∏ –∏ –∫–æ–º–ø–∞–Ω–∏–∏\n2. –û–±–Ω–æ–≤–∏—Ç—å —Ä–µ–∑—é–º–µ –ø–æ–¥ –∫–∞–∂–¥—É—é –≤–∞–∫–∞–Ω—Å–∏—é\n3. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ä–∞–∑–ª–∏—á–Ω—ã–µ –∫–∞–Ω–∞–ª—ã –ø–æ–∏—Å–∫–∞\n4. –ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å—Å—è –∫ —Å–µ—Ç–µ–≤–æ–º—É –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—é\n\n–í –∫–∞–∫–æ–π —Å—Ñ–µ—Ä–µ –∏—â–µ—Ç–µ —Ä–∞–±–æ—Ç—É? –ú–æ–≥—É –¥–∞—Ç—å –±–æ–ª–µ–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Å–æ–≤–µ—Ç—ã."
    else:
        import random
        return random.choice(responses) 