from fastapi import APIRouter, Depends, HTTPException, status
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy import select, desc, func
from sqlalchemy.orm import selectinload
from typing import Optional, List
import time
import uuid
import logging
from openai import AsyncAzureOpenAI

from ..database import get_db
from ..models.user import User
from ..models.assistant import Assistant
from ..models.chat import ChatHistory, Message, MessageRole
from ..schemas.assistant import (
    AssistantCreate, AssistantUpdate, AssistantResponse, 
    AssistantsListResponse, AssistantListItem, AssistantWithChatHistory
)
from ..schemas.chat import (
    SendMessageRequest, SendMessageResponse, ChatHistoryResponse,
    ConversationMessage, SenderInfo
)
from ..auth.jwt import get_current_user
from ..config import settings

router = APIRouter(prefix="/api/main/assistants", tags=["assistants"])
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Azure OpenAI –∫–ª–∏–µ–Ω—Ç–∞
azure_openai_client = None
if settings.azure_openai_api_key and settings.azure_openai_base_url:
    try:
        azure_openai_client = AsyncAzureOpenAI(
            api_key=settings.azure_openai_api_key,
            azure_endpoint=settings.azure_openai_base_url,
            api_version=settings.azure_openai_api_version
        )
    except Exception as e:
        logger.error(f"Failed to create Azure OpenAI client: {e}")
        azure_openai_client = None

@router.get("/", response_model=AssistantsListResponse)
async def get_assistants(
    db: AsyncSession = Depends(get_db),
    current_user: User = Depends(get_current_user)
):
    """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    result = await db.execute(
        select(Assistant)
        .where(Assistant.user_id == current_user.id)
        .where(Assistant.is_active == True)
        .order_by(desc(Assistant.updated_at))
    )
    assistants = result.scalars().all()
    
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ –Ω—É–∂–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
    assistant_items = [
        AssistantListItem(
            id=str(assistant.id),
            name=str(assistant.name),
            description=str(assistant.description) if assistant.description is not None else None,
            model=str(assistant.model),
            lastEdited=int(assistant.updated_at.timestamp()) if assistant.updated_at is not None else int(assistant.created_at.timestamp())
        )
        for assistant in assistants
    ]
    
    return AssistantsListResponse(
        data=assistant_items,
        total=len(assistant_items)
    )

@router.get("/{assistant_id}", response_model=AssistantWithChatHistory)
async def get_assistant(
    assistant_id: int,
    db: AsyncSession = Depends(get_db),
    current_user: User = Depends(get_current_user)
):
    """–ü–æ–ª—É—á–∏—Ç—å –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ —Å –∏—Å—Ç–æ—Ä–∏–µ–π —á–∞—Ç–æ–≤"""
    result = await db.execute(
        select(Assistant)
        .options(
            selectinload(Assistant.chat_histories)
            .selectinload(ChatHistory.messages)
        )
        .where(Assistant.id == assistant_id)
        .where(Assistant.user_id == current_user.id)
    )
    assistant = result.scalar_one_or_none()
    
    if not assistant:
        raise HTTPException(
            status_code=status.HTTP_404_NOT_FOUND,
            detail="Assistant not found"
        )
    
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–æ–≤ –≤ –Ω—É–∂–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
    chat_history = []
    for chat in assistant.chat_histories:
        if chat.enable:
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
            conversation = []
            for message in chat.messages:
                conversation.append(ConversationMessage(
                    id=str(message.id),
                    sender=SenderInfo(
                        id=message.sender_id,
                        name=message.sender_name,
                        avatarImageUrl=message.avatar_image_url
                    ),
                    content=message.content,
                    timestamp=message.timestamp,
                    isMyMessage=message.is_my_message,
                    fresh=message.fresh
                ))
            
            chat_history.append(ChatHistoryResponse(
                id=str(chat.id),
                title=chat.title,
                conversation=conversation,
                lastConversation=chat.last_conversation or "",
                createdTime=chat.created_time,
                updatedTime=chat.updated_time,
                enable=chat.enable
            ))
    
    response = AssistantWithChatHistory.model_validate(assistant)
    response.chat_history = chat_history
    
    return response

@router.post("/{assistant_id}/chat", response_model=SendMessageResponse)
async def send_message_to_assistant(
    assistant_id: int,
    request: SendMessageRequest,
    db: AsyncSession = Depends(get_db),
    current_user: User = Depends(get_current_user)
):
    """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç—É"""
    
    logger.info(f"üî• Chat request received: assistant_id={assistant_id}, user={current_user.username}")
    logger.info(f"üî• Message: {request.message[:100]}...")
    if request.images:
        logger.info(f"üì∏ Images received: {len(request.images)} images")
    else:
        logger.info("üì∏ No images in request")
    
    try:
        # Check if assistant exists and belongs to user
        result = await db.execute(
            select(Assistant)
            .where(Assistant.id == assistant_id)
            .where(Assistant.user_id == current_user.id)
        )
        assistant = result.scalar_one_or_none()
        
        # If no assistant found, create a default one for this user
        if not assistant:
            logger.info(f"Creating default assistant for user {current_user.id}")
            assistant = Assistant(
                user_id=current_user.id,
                name="AI –ü–æ–º–æ—â–Ω–∏–∫ –ø–æ –ø–æ–∏—Å–∫—É —Ä–∞–±–æ—Ç—ã",
                description="–í–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ä–∞–±–æ—Ç—ã –∏ –∫–∞—Ä—å–µ—Ä–Ω–æ–≥–æ –∫–æ–Ω—Å—É–ª—å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è",
                model="gpt-4o",
                system_prompt="–¢—ã - –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç –ø–æ –∫–∞—Ä—å–µ—Ä–µ –∏ –ø–æ–∏—Å–∫—É —Ä–∞–±–æ—Ç—ã. –ü–æ–º–æ–≥–∞–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –Ω–∞—Ö–æ–¥–∏—Ç—å –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏, —Å–æ—Å—Ç–∞–≤–ª—è—Ç—å —Ä–µ–∑—é–º–µ –∏ –≥–æ—Ç–æ–≤–∏—Ç—å—Å—è –∫ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—è–º. –ë—É–¥—å –≤–µ–∂–ª–∏–≤—ã–º –∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–º. –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∏—Å–ª–∞–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, —Ç–æ –∏—Å–ø–æ–ª—å–∑—É–π –µ–≥–æ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∏ –æ—Ç–≤–µ—Ç–∞. –ü–æ–º–æ–≥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å—Ç–∞—Ç—å —É–≤–µ—Ä–µ–Ω–Ω–µ–µ –≤ —Å–µ–±–µ –∏ –º—è–≥–∫–æ –æ—Ç–≤–µ—á–∞–π –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã, –º–æ—Ä–∞–ª—å–Ω–æ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–π –∫–∞–∫ –¥—Ä—É–≥–∞.",
                temperature="0.5",
                max_tokens=4096,
                is_active=True
            )
            db.add(assistant)
            await db.commit()
            await db.refresh(assistant)
    
        # –ù–∞—Ö–æ–¥–∏–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞
        participant_id = request.participant
        chat_history = None
        
        if participant_id and participant_id != "":
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ participant_id —á–∏—Å–ª–æ–º (—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —á–∞—Ç)
            try:
                chat_id = int(participant_id)
                # –ò—â–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —á–∞—Ç –ø–æ ID
                chat_result = await db.execute(
                    select(ChatHistory)
                    .where(ChatHistory.id == chat_id)
                    .where(ChatHistory.user_id == current_user.id)
                    .where(ChatHistory.assistant_id == assistant.id)
                    .options(selectinload(ChatHistory.messages))
                )
                chat_history = chat_result.scalar_one_or_none()
            except ValueError:
                # participant_id –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —á–∏—Å–ª–æ–º - —ç—Ç–æ –Ω–æ–≤—ã–π —á–∞—Ç —Å UUID
                # –ù–µ –∏—â–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —á–∞—Ç, —Å–æ–∑–¥–∞–¥–∏–º –Ω–æ–≤—ã–π
                chat_history = None
        
        if not chat_history:
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —á–∞—Ç
            current_time = int(time.time())
            chat_history = ChatHistory(
                assistant_id=assistant.id,
                user_id=current_user.id,
                title=request.message[:50] + "..." if len(request.message) > 50 else request.message,
                last_conversation=request.message,
                created_time=current_time,
                updated_time=current_time,
                enable=True
            )
            db.add(chat_history)
            await db.flush()  # –ü–æ–ª—É—á–∞–µ–º ID
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_message = Message(
            chat_history_id=chat_history.id,
            content=request.message,
            role=MessageRole.USER,
            sender_id="user",
            sender_name=current_user.username,
            is_my_message=True,
            fresh=False
        )
        db.add(user_message)
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π –ü–ï–†–ï–î –≤—ã–∑–æ–≤–æ–º AI API
        messages_result = await db.execute(
            select(Message)
            .where(Message.chat_history_id == chat_history.id)
            .order_by(Message.id.desc())
            .limit(10)
        )
        recent_messages = messages_result.scalars().all()
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ (–ø–µ—Ä–µ–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π, –ù–ï chat_history)
        ai_response_content = await generate_ai_response(
            user_message=request.message,
            recent_messages=list(reversed(recent_messages)),  # –ü–µ—Ä–µ–≤–æ—Ä–∞—á–∏–≤–∞–µ–º –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –æ—á–µ—Ä–µ–¥–Ω–æ—Å—Ç–∏
            images=request.images  # –ü–µ—Ä–µ–¥–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
        ai_message = Message(
            chat_history_id=chat_history.id,
            content=ai_response_content,
            role=MessageRole.AI,
            sender_id="ai",
            sender_name="BOT",
            avatar_image_url="/img/thumbs/ai.jpg",
            is_my_message=False,
            fresh=True
        )
        db.add(ai_message)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
        try:
            await db.commit()
            logger.info(f"üíæ Successfully saved message to database")
        except Exception as e:
            logger.error(f"‚ùå Database error: {str(e)}")
            await db.rollback()
            # –í—Å–µ —Ä–∞–≤–Ω–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ç–≤–µ—Ç, –¥–∞–∂–µ –µ—Å–ª–∏ –Ω–µ —Å–º–æ–≥–ª–∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ –ë–î
            pass
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ç–≤–µ—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ, —Å–æ–≤–º–µ—Å—Ç–∏–º–æ–º —Å —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–æ–º
        response = SendMessageResponse(
            replies=[ai_response_content]
        )
        
        logger.info(f"‚úÖ Chat response prepared successfully")
        return response
        
    except Exception as e:
        logger.error(f"‚ùå Error in chat endpoint: {str(e)}")
        logger.exception("Full error traceback:")
        
        # Return error response but in the expected format
        return SendMessageResponse(
            replies=[f"–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑. (–û—à–∏–±–∫–∞: {str(e)})"]
        )

async def generate_ai_response(
    user_message: str, 
    recent_messages: list | None = None,
    images: list[str] | None = None
) -> str:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ –∏—Å–ø–æ–ª—å–∑—É—è Azure OpenAI API"""
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_language = detect_language(user_message)
    
    # –ï—Å–ª–∏ Azure OpenAI API –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –º–æ–∫-–æ—Ç–≤–µ—Ç—ã
    if not azure_openai_client or not settings.azure_openai_api_key:
        logger.warning("Azure OpenAI API not configured, using mock responses")
        return generate_mock_ai_response(user_message, images, user_language)
    
    logger.info(f"ü§ñ Calling Azure OpenAI API for message: {user_message[:50]}... (Language: {user_language})")
    
    try:
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
        messages = []
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–º —è–∑—ã–∫–µ
        system_prompt = get_system_prompt(user_language)
        messages.append({
            "role": "system",
            "content": system_prompt
        })
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        if recent_messages:
            for msg in recent_messages:
                if msg.role == MessageRole.USER:
                    messages.append({
                        "role": "user",
                        "content": msg.content
                    })
                elif msg.role == MessageRole.AI:
                    messages.append({
                        "role": "assistant", 
                        "content": msg.content
                    })
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if images and len(images) > 0:
            # –°–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏ - –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç—Ä–æ–∫—É –∫–∞–∫ fallback –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
            content_text = f"{user_message}\n\n[–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–æ]"
            messages.append({
                "role": "user", 
                "content": content_text
            })
            
            logger.info(f"üì∏ Received {len(images)} images for analysis")
        else:
            # –û–±—ã—á–Ω–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            messages.append({
                "role": "user",
                "content": user_message
            })
        
        # –í—ã–∑—ã–≤–∞–µ–º Azure OpenAI API
        response = await azure_openai_client.chat.completions.create(
            model=settings.azure_openai_deployment_name,  # –ò—Å–ø–æ–ª—å–∑—É–µ–º deployment name
            messages=messages,
            max_tokens=settings.azure_openai_max_tokens,
            temperature=float(settings.azure_openai_temperature),
            stream=False
        )
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –æ—Ç–≤–µ—Ç
        ai_response = response.choices[0].message.content
        
        if not ai_response:
            logger.error("Empty response from Azure OpenAI")
            return generate_mock_ai_response(user_message, images, user_language)
            
        logger.info(f"‚úÖ Azure OpenAI API response received: {len(ai_response)} characters")
        return ai_response.strip()
        
    except Exception as e:
        logger.error(f"‚ùå Error calling Azure OpenAI API: {str(e)}")
        logger.error(f"   Using mock response instead")
        # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –º–æ–∫-–æ—Ç–≤–µ—Ç
        return generate_mock_ai_response(user_message, images, user_language)

def detect_language(text: str) -> str:
    """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —è–∑—ã–∫ —Ç–µ–∫—Å—Ç–∞ (—Ä—É—Å—Å–∫–∏–π, –∫–∞–∑–∞—Ö—Å–∫–∏–π, –∞–Ω–≥–ª–∏–π—Å–∫–∏–π)"""
    text_lower = text.lower()
    
    # –ü—Ä–æ—Å—Ç–∞—è —ç–≤—Ä–∏—Å—Ç–∏–∫–∞ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —è–∑—ã–∫–∞
    russian_chars = set('–∞–±–≤–≥–¥–µ—ë–∂–∑–∏–π–∫–ª–º–Ω–æ–ø—Ä—Å—Ç—É—Ñ—Ö—Ü—á—à—â—ä—ã—å—ç—é—è')
    kazakh_chars = set('”ô“ì“õ“£”©“±“Ø—ñ“ª')
    english_chars = set('abcdefghijklmnopqrstuvwxyz')
    
    # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å–∏–º–≤–æ–ª—ã –∫–∞–∂–¥–æ–≥–æ —è–∑—ã–∫–∞
    russian_count = sum(1 for char in text_lower if char in russian_chars)
    kazakh_count = sum(1 for char in text_lower if char in kazakh_chars)
    english_count = sum(1 for char in text_lower if char in english_chars)
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–æ–º–∏–Ω–∏—Ä—É—é—â–∏–π —è–∑—ã–∫
    if kazakh_count > 0:
        return "kazakh"
    elif russian_count > english_count:
        return "russian"
    elif english_count > russian_count:
        return "english"
    else:
        return "russian"  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Ä—É—Å—Å–∫–∏–π

def get_system_prompt(language: str) -> str:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–º —è–∑—ã–∫–µ"""
    prompts = {
        "russian": """–¢—ã - –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç –ø–æ –∫–∞—Ä—å–µ—Ä–µ –∏ –ø–æ–∏—Å–∫—É —Ä–∞–±–æ—Ç—ã –¥–ª—è –ª—é–¥–µ–π —Å –∏–Ω–≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å—é –≤ AI-Komekshi. 
        –¢–≤–æ—è –∑–∞–¥–∞—á–∞ - –ø–æ–º–æ–≥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º —Å:
        - –ü–æ–∏—Å–∫–æ–º –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –≤–∞–∫–∞–Ω—Å–∏–π
        - –°–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ–º —Ä–µ–∑—é–º–µ
        - –ü–æ–¥–≥–æ—Ç–æ–≤–∫–æ–π –∫ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—è–º
        - –†–∞–∑–≤–∏—Ç–∏–µ–º –∫–∞—Ä—å–µ—Ä—ã
        - –°–æ–≤–µ—Ç–∞–º–∏ –ø–æ —Ç—Ä—É–¥–æ—É—Å—Ç—Ä–æ–π—Å—Ç–≤—É
        - –ú–æ—Ä–∞–ª—å–Ω–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π
        - –ê–Ω–∞–ª–∏–∑–æ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π

        –û—Ç–≤–µ—á–∞–π –¥—Ä—É–∂–µ–ª—é–±–Ω–æ, –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ –∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ. –ò—Å–ø–æ–ª—å–∑—É–π —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫.""",
        
        "kazakh": """–°–µ–Ω - AI-Komekshi-–¥–µ –º“Ø–≥–µ–¥–µ–∫ –∞–¥–∞–º–¥–∞—Ä“ì–∞ –∞—Ä–Ω–∞–ª“ì–∞–Ω –∫”ô—Å—ñ–ø –∂”ô–Ω–µ –∂“±–º—ã—Å —ñ–∑–¥–µ—É –±–æ–π—ã–Ω—à–∞ –∫”ô—Å—ñ–±–∏ –∫–µ“£–µ—Å—à—ñ—Å—ñ—Å—ñ“£.
        –°–µ–Ω—ñ“£ –º—ñ–Ω–¥–µ—Ç—ñ“£ - –ø–∞–π–¥–∞–ª–∞–Ω—É—à—ã–ª–∞—Ä“ì–∞ –∫”©–º–µ–∫—Ç–µ—Å—É:
        - –°”ô–π–∫–µ—Å –≤–∞–∫–∞–Ω—Å–∏—è–ª–∞—Ä–¥—ã —ñ–∑–¥–µ—É–¥–µ
        - –†–µ–∑—é–º–µ –∂–∞—Å–∞—É–¥–∞
        - –°“±—Ö–±–∞—Ç“õ–∞ –¥–∞–π—ã–Ω–¥–∞–ª—É–¥–∞
        - –ö”ô—Å—ñ–ø –¥–∞–º—É—ã–Ω–¥–∞
        - –ñ“±–º—ã—Å“õ–∞ –æ—Ä–Ω–∞–ª–∞—Å—É –±–æ–π—ã–Ω—à–∞ –∫–µ“£–µ—Å—Ç–µ—Ä–¥–µ
        - –ú–æ—Ä–∞–ª—å–¥—ã“õ “õ–æ–ª–¥–∞—É
        - –°—É—Ä–µ—Ç—Ç–µ—Ä–¥—ñ —Ç–∞–ª–¥–∞—É–¥–∞
        
        –î–æ—Å—Ç—ã“õ, –∫”ô—Å—ñ–±–∏ –∂”ô–Ω–µ –Ω–∞“õ—Ç—ã –∂–∞—É–∞–ø –±–µ—Ä. “ö–∞–∑–∞“õ —Ç—ñ–ª—ñ–Ω “õ–æ–ª–¥–∞–Ω.""",
        
        "english": """You are a professional career and job search consultant for people with disabilities at AI-Komekshi.
        Your task is to help users with:
        - Finding suitable job vacancies
        - Creating resumes
        - Preparing for interviews
        - Career development
        - Employment advice
        - Moral support
        - Image analysis
        

        Respond in a friendly, professional and specific manner. Use English language."""
    }
    
    return prompts.get(language, prompts["russian"])

def generate_mock_ai_response(user_message: str, images: list[str] | None = None, language: str = "russian") -> str:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –º–æ–∫-–æ—Ç–≤–µ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ (fallback) –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–º —è–∑—ã–∫–µ"""
    
    logger.info(f"üé≠ Mock response called with message: {user_message[:50]}... (Language: {language})")
    if images:
        logger.info(f"üé≠ Mock response called WITH {len(images)} images")
    else:
        logger.info("üé≠ Mock response called without images")
    
    # –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    if images and len(images) > 0:
        if language == "kazakh":
            return f"""–ö–µ—Ä–µ–º–µ—Ç! –°—ñ–∑ {len(images)} —Å—É—Ä–µ—Ç –∂—ñ–±–µ—Ä–≥–µ–Ω—ñ“£—ñ–∑–¥—ñ –∫”©—Ä—ñ–ø —Ç“±—Ä–º—ã–Ω.

üîç **–ú–µ–Ω —Å—É—Ä–µ—Ç—Ç–µ—Ä–º–µ–Ω –Ω–µ —ñ—Å—Ç–µ–π –∞–ª–∞–º—ã–Ω:**

üìã **–†–µ–∑—é–º–µ–Ω—ñ —Ç–∞–ª–¥–∞—É** - –µ–≥–µ—Ä –±“±–ª —Ä–µ–∑—é–º–µ–Ω—ñ“£ —Å–∫–∞–Ω—ã –Ω–µ–º–µ—Å–µ —Ñ–æ—Ç–æ—Å—ã –±–æ–ª—Å–∞, “õ“±—Ä—ã–ª—ã–º–¥—ã –∂”ô–Ω–µ –º–∞–∑–º“±–Ω–¥—ã –∂–∞“õ—Å–∞—Ä—Ç—É –±–æ–π—ã–Ω—à–∞ –∫–µ“£–µ—Å –±–µ—Ä–µ –∞–ª–∞–º—ã–Ω

üìÑ **“ö“±–∂–∞—Ç—Ç–∞—Ä–¥—ã —Ç–∞–ª–¥–∞—É** - –∂“±–º—ã—Å“õ–∞ –æ—Ä–Ω–∞–ª–∞—Å—É–º–µ–Ω –±–∞–π–ª–∞–Ω—ã—Å—Ç—ã –∫–µ–∑ –∫–µ–ª–≥–µ–Ω “õ“±–∂–∞—Ç—Ç–∞—Ä–¥—ã —Ç–∞–ª–¥–∞—É“ì–∞ –∫”©–º–µ–∫—Ç–µ—Å–µ–º—ñ–Ω

üíº **–í–∞–∫–∞–Ω—Å–∏—è–ª–∞—Ä–¥—ã —Ç–∞–ª–¥–∞—É** - –µ–≥–µ—Ä –±“±–ª –≤–∞–∫–∞–Ω—Å–∏—è–Ω—ã“£ —Å–∫—Ä–∏–Ω—à–æ—Ç—ã –±–æ–ª—Å–∞, –æ“ì–∞–Ω “õ–∞–ª–∞–π –∂–∞“õ—Å—ã –¥–∞–π—ã–Ω–¥–∞–ª—É –∫–µ—Ä–µ–∫—Ç—ñ–≥—ñ–Ω –∞–π—Ç–∞–º—ã–Ω

üéØ **–°“±—Ö–±–∞—Ç“õ–∞ –¥–∞–π—ã–Ω–¥–∞–ª—É** - –µ–≥–µ—Ä –±“±–ª –∫–æ–º–ø–∞–Ω–∏—è —Ç—É—Ä–∞–ª—ã –º–∞—Ç–µ—Ä–∏–∞–ª–¥–∞—Ä –±–æ–ª—Å–∞, —Å“±—Ä–∞“õ—Ç–∞—Ä –¥–∞–π—ã–Ω–¥–∞—É“ì–∞ –∫”©–º–µ–∫—Ç–µ—Å–µ–º—ñ–Ω

–°—É—Ä–µ—Ç—Ç–µ –Ω–µ –µ–∫–µ–Ω—ñ–Ω —Å–∏–ø–∞—Ç—Ç–∞“£—ã–∑, –º–µ–Ω —Å—ñ–∑–¥—ñ“£ –∂“±–º—ã—Å“õ–∞ –æ—Ä–Ω–∞–ª–∞—Å—É—ã“£—ã–∑“ì–∞ –º–∞–∫—Å–∏–º–∞–ª–¥—ã –ø–∞–π–¥–∞–ª—ã –∫–µ“£–µ—Å—Ç–µ—Ä –±–µ—Ä–µ–º—ñ–Ω!"""
        elif language == "english":
            return f"""Great! I can see you've sent {len(images)} image(s).

üîç **What I can do with images:**

üìã **Resume analysis** - if this is a scan or photo of a resume, I can give advice on improving structure and content

üìÑ **Document analysis** - help analyze any documents related to employment

üíº **Job vacancy analysis** - if this is a screenshot of a vacancy, I'll tell you how to better prepare for it

üéØ **Interview preparation** - if these are materials about a company, I'll help prepare questions

Describe what exactly is in the image, and I'll give you the most useful advice for your employment!"""
        else:  # russian
            return f"""–û—Ç–ª–∏—á–Ω–æ! –Ø –≤–∏–∂—É, —á—Ç–æ –≤—ã –ø—Ä–∏—Å–ª–∞–ª–∏ {len(images)} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ(–π). 

üîç **–ß—Ç–æ —è –º–æ–≥—É —Å–¥–µ–ª–∞—Ç—å —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏:**

üìã **–ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—é–º–µ** - –µ—Å–ª–∏ —ç—Ç–æ —Å–∫–∞–Ω –∏–ª–∏ —Ñ–æ—Ç–æ —Ä–µ–∑—é–º–µ, —è –º–æ–≥—É –¥–∞—Ç—å —Å–æ–≤–µ—Ç—ã –ø–æ —É–ª—É—á—à–µ–Ω–∏—é —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –∏ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è

üìÑ **–ê–Ω–∞–ª–∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤** - –ø–æ–º–æ–≥—É —Ä–∞–∑–æ–±—Ä–∞—Ç—å –ª—é–±—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å —Ç—Ä—É–¥–æ—É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ–º

üíº **–ê–Ω–∞–ª–∏–∑ –≤–∞–∫–∞–Ω—Å–∏–π** - –µ—Å–ª–∏ —ç—Ç–æ —Å–∫—Ä–∏–Ω—à–æ—Ç –≤–∞–∫–∞–Ω—Å–∏–∏, –ø–æ–¥—Å–∫–∞–∂—É –∫–∞–∫ –ª—É—á—à–µ –∫ –Ω–µ–π –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å—Å—è

üéØ **–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—é** - –µ—Å–ª–∏ —ç—Ç–æ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –æ –∫–æ–º–ø–∞–Ω–∏–∏, –ø–æ–º–æ–≥—É –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –≤–æ–ø—Ä–æ—Å—ã

–û–ø–∏—à–∏—Ç–µ, —á—Ç–æ –∏–º–µ–Ω–Ω–æ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏, –∏ —è –¥–∞–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –ø–æ–ª–µ–∑–Ω—ã–µ —Å–æ–≤–µ—Ç—ã –¥–ª—è –≤–∞—à–µ–≥–æ —Ç—Ä—É–¥–æ—É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞!"""

    # –û—Ç–≤–µ—Ç—ã –Ω–∞ —Ä–∞–∑–Ω—ã—Ö —è–∑—ã–∫–∞—Ö
    responses = {
        "russian": [
            "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã –æ –ø–æ–∏—Å–∫–µ —Ä–∞–±–æ—Ç—ã, —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–∏ —Ä–µ–∑—é–º–µ –∏–ª–∏ —Ä–∞–∑–≤–∏—Ç–∏–∏ –∫–∞—Ä—å–µ—Ä—ã, —è –≥–æ—Ç–æ–≤ –ø–æ–º–æ—á—å. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É—Ç–æ—á–Ω–∏—Ç–µ, —á–µ–º –º–æ–≥—É –±—ã—Ç—å –ø–æ–ª–µ–∑–µ–Ω! üòä",
            "–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ! –Ø –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç AI-Komekshi –∏ –≥–æ—Ç–æ–≤ –ø–æ–º–æ—á—å –≤–∞–º —Å –ø–æ–∏—Å–∫–æ–º —Ä–∞–±–æ—Ç—ã. –û —á–µ–º —Ö–æ—Ç–µ–ª–∏ –±—ã –ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å?",
            "–ü–æ–Ω—è—Ç–Ω–æ! –î–∞–≤–∞–π—Ç–µ —Ä–∞–∑–±–µ—Ä–µ–º —ç—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å –ø–æ–¥—Ä–æ–±–Ω–µ–µ. –ö–∞–∫—É—é –∏–º–µ–Ω–Ω–æ –ø–æ–º–æ—â—å –≤–∞–º –Ω—É–∂–Ω–∞ –≤ –ø–æ–∏—Å–∫–µ —Ä–∞–±–æ—Ç—ã?",
            "–û—Ç–ª–∏—á–Ω—ã–π –≤–æ–ø—Ä–æ—Å! –ö–∞–∫ –≤–∞—à AI-–ø–æ–º–æ—â–Ω–∏–∫, —è —Ä–µ–∫–æ–º–µ–Ω–¥—É—é —Å–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏ –¥–ª—è —É—Å–ø–µ—à–Ω–æ–≥–æ —Ç—Ä—É–¥–æ—É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞...",
            "–Ø –∞–Ω–∞–ª–∏–∑–∏—Ä—É—é –≤–∞—à –∑–∞–ø—Ä–æ—Å –∏ –≥–æ—Ç–æ–≤ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ —Ä–µ—à–µ–Ω–∏—è –¥–ª—è –≤–∞—à–µ–π –∫–∞—Ä—å–µ—Ä—ã."
        ],
        "kazakh": [
            "–°”ô–ª–µ–º–µ—Ç—Å—ñ–∑ –±–µ! –ï–≥–µ—Ä —Å—ñ–∑–¥–µ –∂“±–º—ã—Å —ñ–∑–¥–µ—É, —Ä–µ–∑—é–º–µ –∂–∞—Å–∞—É –Ω–µ–º–µ—Å–µ –∫”ô—Å—ñ–ø –¥–∞–º—É—ã —Ç—É—Ä–∞–ª—ã —Å“±—Ä–∞“õ—Ç–∞—Ä –±–æ–ª—Å–∞, –º–µ–Ω –∫”©–º–µ–∫—Ç–µ—Å—É–≥–µ –¥–∞–π—ã–Ω–º—ã–Ω. “ö–∞–Ω–¥–∞–π –∫”©–º–µ–∫ –∫–µ—Ä–µ–∫—Ç—ñ–≥—ñ–Ω –Ω–∞“õ—Ç—ã–ª–∞“£—ã–∑! üòä",
            "–•–∞–±–∞—Ä–ª–∞–º–∞“£—ã–∑ “Ø—à—ñ–Ω —Ä–∞—Ö–º–µ—Ç! –ú–µ–Ω AI-Komekshi –∫”©–º–µ–∫—à—ñ—Å—ñ –∂”ô–Ω–µ –∂“±–º—ã—Å —ñ–∑–¥–µ—É–¥–µ –∫”©–º–µ–∫—Ç–µ—Å—É–≥–µ –¥–∞–π—ã–Ω–º—ã–Ω. –ù–µ —Ç—É—Ä–∞–ª—ã —Å”©–π–ª–µ—Å–≥—ñ“£—ñ–∑ –∫–µ–ª–µ–¥—ñ?",
            "–¢“Ø—Å—ñ–Ω—ñ–∫—Ç—ñ! –ë“±–ª —Å“±—Ä–∞“õ—Ç—ã —Ç–æ–ª—ã“ì—ã—Ä–∞“õ “õ–∞—Ä–∞—Å—Ç—ã—Ä–∞–π—ã“õ. –ñ“±–º—ã—Å —ñ–∑–¥–µ—É–¥–µ “õ–∞–Ω–¥–∞–π –∫”©–º–µ–∫ –∫–µ—Ä–µ–∫?",
            "–ö–µ—Ä–µ–º–µ—Ç —Å“±—Ä–∞“õ! –°—ñ–∑–¥—ñ“£ AI-–∫”©–º–µ–∫—à—ñ“£—ñ–∑ —Ä–µ—Ç—ñ–Ω–¥–µ, —Å”ô—Ç—Ç—ñ –∂“±–º—ã—Å“õ–∞ –æ—Ä–Ω–∞–ª–∞—Å—É “Ø—à—ñ–Ω –∫–µ–ª–µ—Å—ñ “õ–∞–¥–∞–º–¥–∞—Ä–¥—ã “±—Å—ã–Ω–∞–º—ã–Ω...",
            "–ú–µ–Ω —Å—ñ–∑–¥—ñ“£ —Å“±—Ä–∞—É—ã“£—ã–∑–¥—ã —Ç–∞–ª–¥–∞–ø, –∫”ô—Å—ñ–ø—ñ“£—ñ–∑ “Ø—à—ñ–Ω –±—ñ—Ä–Ω–µ—à–µ —à–µ—à—ñ–º –Ω“±—Å“õ–∞–ª–∞—Ä—ã–Ω “±—Å—ã–Ω—É“ì–∞ –¥–∞–π—ã–Ω–º—ã–Ω."
        ],
        "english": [
            "Hello! If you have questions about job search, resume writing, or career development, I'm ready to help. Please specify what I can be useful for! üòä",
            "Thank you for your message! I'm an AI-Komekshi assistant and ready to help you with job search. What would you like to talk about?",
            "I understand! Let's analyze this issue in more detail. What specific help do you need in job search?",
            "Great question! As your AI assistant, I recommend the following steps for successful employment...",
            "I'm analyzing your request and ready to offer several solution options for your career."
        ]
    }
    
    # –ü—Ä–æ—Å—Ç–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –æ—Ç–≤–µ—Ç–æ–≤
    user_lower = user_message.lower()
    
    if language == "kazakh":
        if any(word in user_lower for word in ['—Ä–µ–∑—é–º–µ', 'cv', '—Ä–µ–∑—é–º–µ—Å—ñ']):
            return "–°”ô–π–∫–µ—Å —Ä–µ–∑—é–º–µ –∂–∞—Å–∞—É “Ø—à—ñ–Ω “±—Å—ã–Ω–∞–º—ã–Ω:\n\n1. –ñ“±–º—ã—Å“õ–∞ –æ—Ä–Ω–∞–ª–∞—Å—É –º–∞“õ—Å–∞—Ç—ã–Ω –Ω–∞“õ—Ç—ã –∫”©—Ä—Å–µ—Ç—ñ“£—ñ–∑\n2. –ù–µ–≥—ñ–∑–≥—ñ –¥–∞“ì–¥—ã–ª–∞—Ä –º–µ–Ω –∂–µ—Ç—ñ—Å—Ç—ñ–∫—Ç–µ—Ä–¥—ñ –±”©–ª—ñ–ø –∫”©—Ä—Å–µ—Ç—ñ“£—ñ–∑\n3. –ë—ñ–ª—ñ–º —Ç—É—Ä–∞–ª—ã –∞“õ–ø–∞—Ä–∞—Ç “õ–æ—Å—ã“£—ã–∑\n4. –ñ“±–º—ã—Å —Ç”ô–∂—ñ—Ä–∏–±–µ—Å—ñ–Ω —Ö—Ä–æ–Ω–æ–ª–æ–≥–∏—è–ª—ã“õ —Ä–µ—Ç–ø–µ–Ω –∫”©—Ä—Å–µ—Ç—ñ“£—ñ–∑\n\n–†–µ–∑—é–º–µ–Ω—ñ“£ –Ω–∞“õ—Ç—ã –±”©–ª—ñ–º–¥–µ—Ä—ñ–º–µ–Ω –∫”©–º–µ–∫—Ç–µ—Å–µ –∞–ª–∞–º—ã–Ω. –ù–µ —Ç—É—Ä–∞–ª—ã —Ç–æ–ª—ã“ì—ã—Ä–∞“õ –±—ñ–ª–≥—ñ“£—ñ–∑ –∫–µ–ª–µ–¥—ñ?"
        elif any(word in user_lower for word in ['—Å“±—Ö–±–∞—Ç', '–∏–Ω—Ç–µ—Ä–≤—å—é', '—Å“±—Ö–±–∞—Ç“õ–∞']):
            return "–°“±—Ö–±–∞—Ç—Ç—ã —Å”ô—Ç—Ç—ñ ”©—Ç–∫—ñ–∑—É “Ø—à—ñ–Ω –∫–µ“£–µ—Å –±–µ—Ä–µ–º—ñ–Ω:\n\n1. –ö–æ–º–ø–∞–Ω–∏—è —Ç—É—Ä–∞–ª—ã –∞“õ–ø–∞—Ä–∞—Ç—Ç—ã –∑–µ—Ä—Ç—Ç–µ“£—ñ–∑\n2. –¢–∏–ø—Ç—ñ–∫ —Å“±—Ä–∞“õ—Ç–∞—Ä“ì–∞ –∂–∞—É–∞–ø—Ç–∞—Ä –¥–∞–π—ã–Ω–¥–∞“£—ã–∑\n3. –ñ“±–º—ã—Å –±–µ—Ä—É—à—ñ–≥–µ —Å“±—Ä–∞“õ—Ç–∞—Ä —Ç—É—Ä–∞–ª—ã –æ–π–ª–∞–Ω—ã“£—ã–∑\n4. –ñ“±–º—ã—Å —Ç”ô–∂—ñ—Ä–∏–±–µ—Å—ñ–Ω–µ–Ω –º—ã—Å–∞–ª–¥–∞—Ä –¥–∞–π—ã–Ω–¥–∞“£—ã–∑\n\n–°“±—Ö–±–∞—Ç“õ–∞ –¥–∞–π—ã–Ω–¥–∞–ª—É —Ç—É—Ä–∞–ª—ã –Ω–∞“õ—Ç—ã —Å“±—Ä–∞“õ—Ç–∞—Ä—ã“£—ã–∑ –±–∞—Ä –º–∞?"
        elif any(word in user_lower for word in ['–∂“±–º—ã—Å', '–≤–∞–∫–∞–Ω—Å–∏—è', '—ñ–∑–¥–µ—É']):
            return "–ñ“±–º—ã—Å —ñ–∑–¥–µ—É–¥—ñ —Ç–∏—ñ–º–¥—ñ –∂“Ø—Ä–≥—ñ–∑—É “Ø—à—ñ–Ω “±—Å—ã–Ω–∞–º—ã–Ω:\n\n1. –ú–∞“õ—Å–∞—Ç—Ç—ã –ª–∞—É–∞–∑—ã–º–¥–∞—Ä –º–µ–Ω –∫–æ–º–ø–∞–Ω–∏—è–ª–∞—Ä–¥—ã –∞–Ω—ã“õ—Ç–∞“£—ã–∑\n2. ”ò—Ä –≤–∞–∫–∞–Ω—Å–∏—è“ì–∞ —Ä–µ–∑—é–º–µ–Ω—ñ –∂–∞“£–∞—Ä—Ç—ã“£—ã–∑\n3. ”ò—Ä—Ç“Ø—Ä–ª—ñ —ñ–∑–¥–µ—É –∞—Ä–Ω–∞–ª–∞—Ä—ã–Ω –ø–∞–π–¥–∞–ª–∞–Ω—ã“£—ã–∑\n4. –ñ–µ–ª—ñ–ª—ñ–∫ ”©–∑–∞—Ä–∞ ”ô—Ä–µ–∫–µ—Ç—Ç–µ—Å—É–≥–µ –¥–∞–π—ã–Ω–¥–∞–ª—ã“£—ã–∑\n\n“ö–∞–π —Å–∞–ª–∞–¥–∞ –∂“±–º—ã—Å —ñ–∑–¥–µ–π—Å—ñ–∑? –ù–µ“ì“±—Ä–ª—ã–º –Ω–∞“õ—Ç—ã –∫–µ“£–µ—Å—Ç–µ—Ä –±–µ—Ä–µ –∞–ª–∞–º—ã–Ω."
    elif language == "english":
        if any(word in user_lower for word in ['resume', 'cv']):
            return "For creating a quality resume, I recommend:\n\n1. Specify a clear employment goal\n2. Highlight key skills and achievements\n3. Add education information\n4. List work experience in chronological order\n\nI can help with specific resume sections. What would you like to know more about?"
        elif any(word in user_lower for word in ['interview', 'interviews']):
            return "For successful interview preparation, I advise:\n\n1. Study company information\n2. Prepare answers to typical questions\n3. Think about questions for the employer\n4. Prepare examples from work experience\n\nDo you have specific questions about interview preparation?"
        elif any(word in user_lower for word in ['job', 'work', 'search']):
            return "For effective job search, I recommend:\n\n1. Define target positions and companies\n2. Update resume for each vacancy\n3. Use various search channels\n4. Prepare for networking\n\nIn what field are you looking for work? I can give more specific advice."
    else:  # russian
        if any(word in user_lower for word in ['—Ä–µ–∑—é–º–µ', 'cv']):
            return "–î–ª—è —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Ä–µ–∑—é–º–µ —Ä–µ–∫–æ–º–µ–Ω–¥—É—é:\n\n1. –£–∫–∞–∑–∞—Ç—å —á–µ—Ç–∫—É—é —Ü–µ–ª—å —Ç—Ä—É–¥–æ—É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞\n2. –í—ã–¥–µ–ª–∏—Ç—å –∫–ª—é—á–µ–≤—ã–µ –Ω–∞–≤—ã–∫–∏ –∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è\n3. –î–æ–±–∞–≤–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–∏\n4. –£–∫–∞–∑–∞—Ç—å –æ–ø—ã—Ç —Ä–∞–±–æ—Ç—ã –≤ —Ö—Ä–æ–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–º –ø–æ—Ä—è–¥–∫–µ\n\n–ú–æ–≥—É –ø–æ–º–æ—á—å —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º–∏ —Ä–∞–∑–¥–µ–ª–∞–º–∏ —Ä–µ–∑—é–º–µ. –û —á–µ–º —Ö–æ—Ç–µ–ª–∏ –±—ã —É–∑–Ω–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–µ–µ?"
        elif any(word in user_lower for word in ['—Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–µ', '–∏–Ω—Ç–µ—Ä–≤—å—é']):
            return "–î–ª—è —É—Å–ø–µ—à–Ω–æ–≥–æ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—è —Å–æ–≤–µ—Ç—É—é:\n\n1. –ò–∑—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–º–ø–∞–Ω–∏–∏\n2. –ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –æ—Ç–≤–µ—Ç—ã –Ω–∞ —Ç–∏–ø–∏—á–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã\n3. –ü–æ–¥—É–º–∞—Ç—å –æ –≤–æ–ø—Ä–æ—Å–∞—Ö —Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—é\n4. –ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –ø—Ä–∏–º–µ—Ä—ã –∏–∑ –æ–ø—ã—Ç–∞ —Ä–∞–±–æ—Ç—ã\n\n–ï—Å—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã –æ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ –∫ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—é?"
        elif any(word in user_lower for word in ['—Ä–∞–±–æ—Ç–∞', '–≤–∞–∫–∞–Ω—Å–∏–∏', '–ø–æ–∏—Å–∫']):
            return "–î–ª—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞ —Ä–∞–±–æ—Ç—ã —Ä–µ–∫–æ–º–µ–Ω–¥—É—é:\n\n1. –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ü–µ–ª–µ–≤—ã–µ –¥–æ–ª–∂–Ω–æ—Å—Ç–∏ –∏ –∫–æ–º–ø–∞–Ω–∏–∏\n2. –û–±–Ω–æ–≤–∏—Ç—å —Ä–µ–∑—é–º–µ –ø–æ–¥ –∫–∞–∂–¥—É—é –≤–∞–∫–∞–Ω—Å–∏—é\n3. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ä–∞–∑–ª–∏—á–Ω—ã–µ –∫–∞–Ω–∞–ª—ã –ø–æ–∏—Å–∫–∞\n4. –ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å—Å—è –∫ —Å–µ—Ç–µ–≤–æ–º—É –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—é\n\n–í –∫–∞–∫–æ–π —Å—Ñ–µ—Ä–µ –∏—â–µ—Ç–µ —Ä–∞–±–æ—Ç—É? –ú–æ–≥—É –¥–∞—Ç—å –±–æ–ª–µ–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Å–æ–≤–µ—Ç—ã."
    
    # –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–ª–æ–≤, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–º —è–∑—ã–∫–µ
    import random
    return random.choice(responses.get(language, responses["russian"])) 