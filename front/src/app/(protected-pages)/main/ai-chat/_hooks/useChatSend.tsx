'use client'

import { useCallback } from 'react'
import { useGenerativeChatStore } from '../_store/generativeChatStore'
import dayjs from 'dayjs'
import uniqueId from 'lodash/uniqueId'
import { apiSendMessageToAssistant } from '@/services/AssistantsService'
import { toast } from '@/components/ui/toast'
import { Notification } from '@/components/ui/Notification'
import { useParticipant } from '../_store/participant'

type ErrorHandler = (error: unknown) => void

// For now, we'll use a default assistant ID
// TODO: In the future, this could come from user preferences or be selectable
const DEFAULT_ASSISTANT_ID = '1' // Replace with your default assistant ID

const useChatSend = () => {
    const {
        selectedConversation,
        setSelectedConversation,
        pushChatHistory,
        pushConversation,
        setIsTyping,
    } = useGenerativeChatStore()
    const [participant, setParticipant] = useParticipant()

    const initParticipant = useCallback(() => {
        const partId = `user_${DEFAULT_ASSISTANT_ID}_${crypto.randomUUID()}`
        if (!participant) {
            setParticipant(partId)
            return partId
        }
        return participant
    }, [participant, setParticipant])

    const createMyMessage = useCallback(
        (id: string, content: string) => {
            pushConversation(id, {
                id: uniqueId('me-'),
                sender: { id: 'me', name: '–í—ã' },
                content,
                timestamp: dayjs().toDate(),
                type: 'regular',
                isMyMessage: true,
            })
        },
        [pushConversation],
    )

    const handleError = useCallback<ErrorHandler>((error) => {
        console.error('ChatSend error:', error)
        toast.push(
            <Notification type="danger" title="–û—à–∏–±–∫–∞ –æ–±—â–µ–Ω–∏—è">
                {(error as Error).message ||
                    '–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.'}
            </Notification>,
            { placement: 'top-end' },
        )
    }, [])

    const createMockResponse = useCallback(
        (prompt: string, hasImages: boolean = false): string => {
            // Check if message contains file attachments
            if (
                prompt.includes('üìé –ü—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã:') ||
                prompt.includes('[–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ:') ||
                prompt.includes('[–§–∞–π–ª:') ||
                hasImages
            ) {
                return `–û—Ç–ª–∏—á–Ω–æ! –Ø –≤–∏–∂—É –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã! üîç

**–ß—Ç–æ —è –º–æ–≥—É —Å–¥–µ–ª–∞—Ç—å —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏:**

üìã **–ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—é–º–µ** - –µ—Å–ª–∏ —ç—Ç–æ —Å–∫–∞–Ω –∏–ª–∏ —Ñ–æ—Ç–æ —Ä–µ–∑—é–º–µ, –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∏ –¥–∞–º —Å–æ–≤–µ—Ç—ã –ø–æ —É–ª—É—á—à–µ–Ω–∏—é

üìÑ **–ê–Ω–∞–ª–∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤** - –ø–æ–º–æ–≥—É —Ä–∞–∑–æ–±—Ä–∞—Ç—å –ª—é–±—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å —Ç—Ä—É–¥–æ—É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ–º  

üíº **–ê–Ω–∞–ª–∏–∑ –≤–∞–∫–∞–Ω—Å–∏–π** - –µ—Å–ª–∏ —ç—Ç–æ —Å–∫—Ä–∏–Ω—à–æ—Ç –≤–∞–∫–∞–Ω—Å–∏–∏, –ø–æ–¥—Å–∫–∞–∂—É –∫–∞–∫ –ª—É—á—à–µ –∫ –Ω–µ–π –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å—Å—è

üéØ **–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—é** - –µ—Å–ª–∏ —ç—Ç–æ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –æ –∫–æ–º–ø–∞–Ω–∏–∏, –ø–æ–º–æ–≥—É –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –≤–æ–ø—Ä–æ—Å—ã

–û–ø–∏—à–∏—Ç–µ, —á—Ç–æ –∏–º–µ–Ω–Ω–æ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏, –∏ —è –¥–∞–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –ø–æ–ª–µ–∑–Ω—ã–µ —Å–æ–≤–µ—Ç—ã –¥–ª—è –≤–∞—à–µ–≥–æ —Ç—Ä—É–¥–æ—É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞!`
            }

            // Mock responses based on the type of prompt
            if (prompt.includes('—Ä–µ–∑—é–º–µ')) {
                return `–ö–æ–Ω–µ—á–Ω–æ, —è –ø–æ–º–æ–≥—É –≤–∞–º —Å–æ—Å—Ç–∞–≤–∏—Ç—å —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–µ —Ä–µ–∑—é–º–µ! –í–æ—Ç –æ—Å–Ω–æ–≤–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:

1. **–°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ä–µ–∑—é–º–µ:**
   - –õ–∏—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
   - –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–∞—è —Ü–µ–ª—å
   - –û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ
   - –û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã
   - –ù–∞–≤—ã–∫–∏ –∏ –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–∏
   - –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è

2. **–°–æ–≤–µ—Ç—ã –ø–æ —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—é:**
   - –î–µ–ª–∞–π—Ç–µ –∞–∫—Ü–µ–Ω—Ç –Ω–∞ –≤–∞—à–∏—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è—Ö –∏ –Ω–∞–≤—ã–∫–∞—Ö
   - –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —á–µ—Ç–∫–∏–µ —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–∏
   - –£–∫–∞–∑—ã–≤–∞–π—Ç–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã

–•–æ—Ç–∏—Ç–µ, —á—Ç–æ–±—ã —è –ø–æ–º–æ–≥ —Å–æ—Å—Ç–∞–≤–∏—Ç—å —Ä–µ–∑—é–º–µ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –≤–∞–∫–∞–Ω—Å–∏–∏?`
            }

            if (prompt.includes('–≤–∞–∫–∞–Ω—Å–∏–∏') || prompt.includes('—Ä–∞–±–æ—Ç—É')) {
                return `–Ø –ø–æ–º–æ–≥—É –≤–∞–º –Ω–∞–π—Ç–∏ –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏! –í–æ—Ç –≥–¥–µ —Å—Ç–æ–∏—Ç –∏—Å–∫–∞—Ç—å —Ä–∞–±–æ—Ç—É:

1. **–°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–∞–π—Ç—ã –¥–ª—è –ª—é–¥–µ–π —Å –∏–Ω–≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å—é:**
   - –û—Å–æ–±—ã–µ –ª—é–¥–∏ (osobie-lyudi.ru)
   - Diswork.ru
   - –†–∞–±–æ—Ç–∞ –¥–ª—è –≤—Å–µ—Ö

2. **–ö–≤–æ—Ç—ã –¥–ª—è —Ç—Ä—É–¥–æ—É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞:**
   - –ö–æ–º–ø–∞–Ω–∏–∏ —Å 100+ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º–∏ –æ–±—è–∑–∞–Ω—ã –∏–º–µ—Ç—å 3% –∫–≤–æ—Ç—É
   - –ì–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω—ã–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ - 4% –∫–≤–æ—Ç—É

3. **–ü–æ–¥–¥–µ—Ä–∂–∫–∞:**
   - –¶–µ–Ω—Ç—Ä—ã –∑–∞–Ω—è—Ç–æ—Å—Ç–∏
   - –ù–ö–û –ø–æ –ø–æ–¥–¥–µ—Ä–∂–∫–µ –ª—é–¥–µ–π —Å –∏–Ω–≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å—é

–ö–∞–∫–∞—è —Å—Ñ–µ—Ä–∞ –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?`
            }

            if (prompt.includes('—Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–µ')) {
                return `–û—Ç–ª–∏—á–Ω—ã–π –≤–æ–ø—Ä–æ—Å! –í–æ—Ç —Å–æ–≤–µ—Ç—ã –ø–æ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ –∫ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—é:

1. **–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞:**
   - –ò–∑—É—á–∏—Ç–µ –∫–æ–º–ø–∞–Ω–∏—é –∏ –≤–∞–∫–∞–Ω—Å–∏—é
   - –ü–æ–¥–≥–æ—Ç–æ–≤—å—Ç–µ –ø—Ä–∏–º–µ—Ä—ã —Å–≤–æ–∏—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
   - –ü—Ä–æ–¥—É–º–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å—ã —Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—é

2. **–û–±—Å—É–∂–¥–µ–Ω–∏–µ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–µ–π:**
   - –ë—É–¥—å—Ç–µ —á–µ—Å—Ç–Ω—ã –æ —Å–≤–æ–∏—Ö –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç—è—Ö
   - –û–±—ä—è—Å–Ω–∏—Ç–µ, –∫–∞–∫ –≤–∞—à–∏ –Ω–∞–≤—ã–∫–∏ –ø–æ–º–æ–≥—É—Ç –∫–æ–º–ø–∞–Ω–∏–∏
   - –û–±—Å—É–¥–∏—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∞–¥–∞–ø—Ç–∞—Ü–∏–∏ —Ä–∞–±–æ—á–µ–≥–æ –º–µ—Å—Ç–∞

3. **–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å:**
   - –§–æ–∫—É—Å–∏—Ä—É–π—Ç–µ—Å—å –Ω–∞ —Å–≤–æ–∏—Ö —Å–∏–ª—å–Ω—ã—Ö —Å—Ç–æ—Ä–æ–Ω–∞—Ö
   - –ü–æ–∫–∞–∂–∏—Ç–µ —ç–Ω—Ç—É–∑–∏–∞–∑–º –∏ –º–æ—Ç–∏–≤–∞—Ü–∏—é

–ï—Å—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∞—è –≤–∞–∫–∞–Ω—Å–∏—è, –∫ –∫–æ—Ç–æ—Ä–æ–π –≥–æ—Ç–æ–≤–∏—Ç–µ—Å—å?`
            }

            return `–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –≤–æ–ø—Ä–æ—Å! –Ø –≥–æ—Ç–æ–≤ –ø–æ–º–æ—á—å –≤–∞–º —Å –ø–æ–∏—Å–∫–æ–º —Ä–∞–±–æ—Ç—ã. 

–ö–∞–∫ –≤–∞—à AI-–ø–æ–º–æ—â–Ω–∏–∫ –ø–æ —Ç—Ä—É–¥–æ—É—Å—Ç—Ä–æ–π—Å—Ç–≤—É, —è –º–æ–≥—É:
- –ü–æ–º–æ—á—å —Å–æ—Å—Ç–∞–≤–∏—Ç—å —Ä–µ–∑—é–º–µ
- –ù–∞–π—Ç–∏ –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏
- –ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –∫ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—é
- –î–∞—Ç—å —Å–æ–≤–µ—Ç—ã –ø–æ –∫–∞—Ä—å–µ—Ä–Ω–æ–º—É —Ä–∞–∑–≤–∏—Ç–∏—é

–ß–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ –º–æ–≥—É –ø–æ–º–æ—á—å? –†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –ø–æ–¥—Ä–æ–±–Ω–µ–µ –æ –≤–∞—à–µ–π —Å–∏—Ç—É–∞—Ü–∏–∏.`
        },
        [],
    )

    const sendMessage = useCallback(
        async (id: string, prompt: string, images?: string[]) => {
            setIsTyping(true)
            try {
                const part = initParticipant()
                let reply = ''

                try {
                    const resp = await apiSendMessageToAssistant(
                        DEFAULT_ASSISTANT_ID,
                        {
                            participant: part,
                            message: prompt,
                            images: images,
                        },
                    )

                    if ('error' in resp) {
                        throw new Error(resp.error || 'Server error')
                    }

                    reply = resp.replies[0]
                } catch (apiError) {
                    console.warn(
                        'API unavailable, using mock response:',
                        apiError,
                    )
                    // Use mock response when API is not available
                    reply = createMockResponse(
                        prompt,
                        images && images.length > 0,
                    )
                }

                pushConversation(id, {
                    id: uniqueId('ai-'),
                    sender: {
                        id: 'ai',
                        name: 'AI –ü–æ–º–æ—â–Ω–∏–∫',
                        avatarImageUrl: '/img/thumbs/ai.jpg',
                    },
                    content: reply,
                    timestamp: dayjs().toDate(),
                    type: 'regular',
                    isMyMessage: false,
                    fresh: false,
                })
            } catch (err) {
                handleError(err)
            } finally {
                setIsTyping(false)
            }
        },
        [
            setIsTyping,
            initParticipant,
            pushConversation,
            handleError,
            createMockResponse,
        ],
    )

    const handleSend = useCallback(
        async (prompt: string, attachments?: File[], images?: string[]) => {
            // Allow sending if there's any content (including file descriptions)
            if (!prompt || prompt.trim().length === 0) return

            try {
                if (selectedConversation) {
                    createMyMessage(selectedConversation, prompt)
                    await sendMessage(selectedConversation, prompt, images)
                } else {
                    const newId = uniqueId('chat-')
                    // Create a shorter title from the prompt
                    const title =
                        prompt.length > 50
                            ? prompt.substring(0, 50) + '...'
                            : prompt

                    pushChatHistory({
                        id: newId,
                        title,
                        lastConversation: prompt,
                        createdTime: dayjs().unix(),
                        updatedTime: dayjs().unix(),
                        enable: true,
                    })
                    createMyMessage(newId, prompt)
                    setSelectedConversation(newId)
                    await sendMessage(newId, prompt, images)
                }
            } catch (err) {
                handleError(err)
            }
        },
        [
            selectedConversation,
            pushChatHistory,
            setSelectedConversation,
            createMyMessage,
            sendMessage,
            handleError,
        ],
    )

    return { handleSend }
}

export default useChatSend
